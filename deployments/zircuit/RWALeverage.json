{
  "address": "0x617237B506af6d6c98bb8607643dc88E4Ec5a045",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "AlreadyBorrowed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "AlreadyUnstaked",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "InvalidAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_lockingPeriodInSeconds",
          "type": "uint32"
        }
      ],
      "name": "InvalidInputs",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        }
      ],
      "name": "NotBorrowed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        }
      ],
      "name": "NotUnlocked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolIsNotActive",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_oldOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "AdminTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "_prevAPY",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "_newAPY",
          "type": "uint128"
        }
      ],
      "name": "BorrowAPYUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "_borrowAPY",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_paymentDue",
          "type": "uint32"
        }
      ],
      "name": "Borrowed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_prevValue",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_newValue",
          "type": "uint64"
        }
      ],
      "name": "LeverageAllowedUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalStaked",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBorrowed",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "borrowAPY",
              "type": "uint128"
            },
            {
              "internalType": "uint32",
              "name": "borrowTime",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "paymentDue",
              "type": "uint32"
            }
          ],
          "indexed": false,
          "internalType": "struct RWALeverage.LeverageInfo",
          "name": "_leverage",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalStaked",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBorrowed",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "borrowAPY",
              "type": "uint128"
            },
            {
              "internalType": "uint32",
              "name": "borrowTime",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "paymentDue",
              "type": "uint32"
            }
          ],
          "indexed": false,
          "internalType": "struct RWALeverage.LiquidateInfo",
          "name": "_liquidate",
          "type": "tuple"
        }
      ],
      "name": "Liquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "LiquidityManagerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "LiquidityManagerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_min",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_max",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_newMin",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_newMax",
          "type": "uint32"
        }
      ],
      "name": "MinMaxStakeDurationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "_borrowAPY",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_borrowTime",
          "type": "uint32"
        }
      ],
      "name": "Paid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_prevValue",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_newValue",
          "type": "uint64"
        }
      ],
      "name": "PenaltyAPYUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum RWALeverage.PoolStatus",
          "name": "_prevStatus",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum RWALeverage.PoolStatus",
          "name": "_newStatus",
          "type": "uint8"
        }
      ],
      "name": "PoolStatusUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_prevValue",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newValue",
          "type": "uint256"
        }
      ],
      "name": "SlicePeriodUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLE_LIQUIDITY_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "addLiquidityManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        }
      ],
      "name": "allStakes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "lockTime",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "unlockTime",
              "type": "uint32"
            },
            {
              "internalType": "bool",
              "name": "isUnstaked",
              "type": "bool"
            }
          ],
          "internalType": "struct RWALeverage.StakeInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_borrowPeriod",
          "type": "uint32"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowAPY",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rwaToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_liquidityManager",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isLiquidityManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "leverageAllowed",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "leverages",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalStaked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalBorrowed",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "borrowAPY",
          "type": "uint128"
        },
        {
          "internalType": "uint32",
          "name": "borrowTime",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "paymentDue",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalStaked",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBorrowed",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "borrowAPY",
              "type": "uint128"
            },
            {
              "internalType": "uint32",
              "name": "borrowTime",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "paymentDue",
              "type": "uint32"
            }
          ],
          "internalType": "struct RWALeverage.LiquidateInfo[]",
          "name": "_liquidate",
          "type": "tuple[]"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxStakeDurationAllowed",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minStakeDurationAllowed",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        }
      ],
      "name": "numberOfStakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "penaltyAPY",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "removeLiquidityManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rwaToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slice",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_lockingPeriodInSeconds",
          "type": "uint32"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "lockTime",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "unlockTime",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "isUnstaked",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "status",
      "outputs": [
        {
          "internalType": "enum RWALeverage.PoolStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "unStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_borrowAPY",
          "type": "uint128"
        }
      ],
      "name": "updateBorrowAPY",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_leverageAllowed",
          "type": "uint64"
        }
      ],
      "name": "updateLeverageAllowed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_min",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_max",
          "type": "uint32"
        }
      ],
      "name": "updateMinMaxDurationAllowed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_penaltyAPY",
          "type": "uint64"
        }
      ],
      "name": "updatePenaltyAPY",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum RWALeverage.PoolStatus",
          "name": "_status",
          "type": "uint8"
        }
      ],
      "name": "updatePoolStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_slice",
          "type": "uint32"
        }
      ],
      "name": "updateSlicePeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x09a7ebe85c0463c6f13afeee1be9e2a36088d86728a2168d308bb02fe4ab0e2b",
  "receipt": {
    "to": null,
    "from": "0xfB085D724583E4fFf5A8aCe5651511b04CAe0b6c",
    "contractAddress": "0x617237B506af6d6c98bb8607643dc88E4Ec5a045",
    "transactionIndex": 1,
    "gasUsed": "2983910",
    "logsBloom": "0x
    "blockHash": "0xbff13c1f1c76356d9ccaf4905944318e9195090133c02565a04fa60ae14aff0e",
    "transactionHash": "0x09a7ebe85c0463c6f13afeee1be9e2a36088d86728a2168d308bb02fe4ab0e2b",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 15930644,
        "transactionHash": "0x09a7ebe85c0463c6f13afeee1be9e2a36088d86728a2168d308bb02fe4ab0e2b",
        "address": "0x617237B506af6d6c98bb8607643dc88E4Ec5a045",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0xbff13c1f1c76356d9ccaf4905944318e9195090133c02565a04fa60ae14aff0e"
      }
    ],
    "blockNumber": 15930644,
    "cumulativeGasUsed": "3038331",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bf0625331bce5455fac474ec9e940e9f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"AlreadyBorrowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"AlreadyUnstaked\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_lockingPeriodInSeconds\",\"type\":\"uint32\"}],\"name\":\"InvalidInputs\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"NotBorrowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"NotUnlocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolIsNotActive\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"AdminTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_prevAPY\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_newAPY\",\"type\":\"uint128\"}],\"name\":\"BorrowAPYUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_borrowAPY\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_paymentDue\",\"type\":\"uint32\"}],\"name\":\"Borrowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_prevValue\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_newValue\",\"type\":\"uint64\"}],\"name\":\"LeverageAllowedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrowed\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"borrowAPY\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"borrowTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"paymentDue\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct RWALeverage.LeverageInfo\",\"name\":\"_leverage\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrowed\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"borrowAPY\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"borrowTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"paymentDue\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct RWALeverage.LiquidateInfo\",\"name\":\"_liquidate\",\"type\":\"tuple\"}],\"name\":\"Liquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"LiquidityManagerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"LiquidityManagerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_min\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_max\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_newMin\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_newMax\",\"type\":\"uint32\"}],\"name\":\"MinMaxStakeDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_borrowAPY\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_borrowTime\",\"type\":\"uint32\"}],\"name\":\"Paid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_prevValue\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_newValue\",\"type\":\"uint64\"}],\"name\":\"PenaltyAPYUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum RWALeverage.PoolStatus\",\"name\":\"_prevStatus\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum RWALeverage.PoolStatus\",\"name\":\"_newStatus\",\"type\":\"uint8\"}],\"name\":\"PoolStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_prevValue\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"SlicePeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_LIQUIDITY_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addLiquidityManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"allStakes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"lockTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"unlockTime\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isUnstaked\",\"type\":\"bool\"}],\"internalType\":\"struct RWALeverage.StakeInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_borrowPeriod\",\"type\":\"uint32\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowAPY\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rwaToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityManager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isLiquidityManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leverageAllowed\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"leverages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrowed\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"borrowAPY\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"borrowTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"paymentDue\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrowed\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"borrowAPY\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"borrowTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"paymentDue\",\"type\":\"uint32\"}],\"internalType\":\"struct RWALeverage.LiquidateInfo[]\",\"name\":\"_liquidate\",\"type\":\"tuple[]\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStakeDurationAllowed\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStakeDurationAllowed\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"numberOfStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penaltyAPY\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeLiquidityManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rwaToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slice\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_lockingPeriodInSeconds\",\"type\":\"uint32\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"lockTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"unlockTime\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isUnstaked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"enum RWALeverage.PoolStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"unStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_borrowAPY\",\"type\":\"uint128\"}],\"name\":\"updateBorrowAPY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_leverageAllowed\",\"type\":\"uint64\"}],\"name\":\"updateLeverageAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_min\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_max\",\"type\":\"uint32\"}],\"name\":\"updateMinMaxDurationAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_penaltyAPY\",\"type\":\"uint64\"}],\"name\":\"updatePenaltyAPY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum RWALeverage.PoolStatus\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"updatePoolStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_slice\",\"type\":\"uint32\"}],\"name\":\"updateSlicePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allStakes(address)\":{\"params\":{\"_staker\":\"address of staker \"}},\"borrow(uint256,uint32)\":{\"params\":{\"_amount\":\"amount of tokens to be borrowed\",\"_borrowPeriod\":\"borrowing period in seconds \"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address,address)\":{\"params\":{\"_admin\":\"address of admin that is resposible for managing liquidity lockup operations\",\"_liquidityManager\":\"address of liquidity manager that is responsible for liquidations of loans\",\"_rwaToken\":\"address of RWA Vault\"}},\"isLiquidityManager(address)\":{\"params\":{\"_account\":\"address to query for role\"}},\"liquidate((address,uint256,uint256,uint128,uint32,uint32)[])\":{\"params\":{\"_liquidate\":\"liquidation information\"}},\"numberOfStakes(address)\":{\"params\":{\"_staker\":\"address of lender\"}},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"stake(uint256,uint32)\":{\"params\":{\"_amount\":\"amount of shares to stake\",\"_lockingPeriodInSeconds\":\"locking period converted in seconds\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"unStake(uint256)\":{\"params\":{\"_index\":\"position number\"}},\"updateBorrowAPY(uint128)\":{\"params\":{\"_borrowAPY\":\"percentage in 2 basis point (ex: for 10.03% => 1003)\"}},\"updateLeverageAllowed(uint64)\":{\"params\":{\"_leverageAllowed\":\"the new leverage value to be set\"}},\"updateMinMaxDurationAllowed(uint32,uint32)\":{\"params\":{\"_max\":\"maximum lockup period in seconds\",\"_min\":\"minimum lockup period in seconds\"}},\"updatePenaltyAPY(uint64)\":{\"params\":{\"_penaltyAPY\":\"percentage in 2 basis point (ex: for 10.03% => 1003)\"}},\"updatePoolStatus(uint8)\":{\"params\":{\"_status\":\"status to update\"}},\"updateSlicePeriod(uint32)\":{\"params\":{\"_slice\":\"slice period in seconds\"}},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"title\":\"RWA Leverage\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidityManager(address)\":{\"notice\":\"adds new liquidity manager\"},\"allStakes(address)\":{\"notice\":\"returns stakes of given user\"},\"borrow(uint256,uint32)\":{\"notice\":\"allow to borrow pool tokens from RWA vault reserve balance\"},\"grantRole(bytes32,address)\":{\"notice\":\"grants a role to account\"},\"initialize(address,address,address)\":{\"notice\":\"Initializes contract\"},\"isLiquidityManager(address)\":{\"notice\":\"returns true if given address has liquidity manager role\"},\"liquidate((address,uint256,uint256,uint128,uint32,uint32)[])\":{\"notice\":\"liquidates user loans in batch\"},\"numberOfStakes(address)\":{\"notice\":\"returns number of lockups commited by lender\"},\"pay()\":{\"notice\":\"pays existing loan, penalty will be charged in case of late payment\"},\"removeLiquidityManager(address)\":{\"notice\":\"removes existing liquidity manager\"},\"stake(uint256,uint32)\":{\"notice\":\"stakes RWA vault shares for given period\"},\"transferAdmin(address)\":{\"notice\":\"transfer admin role to new account\"},\"unStake(uint256)\":{\"notice\":\"unstakes given position\"},\"updateBorrowAPY(uint128)\":{\"notice\":\"updates borrow APY that will be charged to new loans\"},\"updateLeverageAllowed(uint64)\":{\"notice\":\"updates the allowed leverage for the system\"},\"updateMinMaxDurationAllowed(uint32,uint32)\":{\"notice\":\"updates minimum and maximum period allowed for staking\"},\"updatePenaltyAPY(uint64)\":{\"notice\":\"Updates the penalty APY for overdue loans\"},\"updatePoolStatus(uint8)\":{\"notice\":\"updates pool status\"},\"updateSlicePeriod(uint32)\":{\"notice\":\"updates slice period for staking\"},\"withdraw(uint256)\":{\"notice\":\"withdraws RWA Vault shares from this contract to RWA Vault\"}},\"notice\":\"Extension of RWA Vault to manage liquidity lockups and leverage holdings\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/RWALeverage.sol\":\"RWALeverage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfeefb24d068524440e1ba885efdf105d91f83504af3c2d745ffacc4595396831\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC4626Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"../token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626Upgradeable is IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0xf867351fb48f5c0e3b45f085ce60f374b785417f84370cb2ffb57f421931e7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xd14a627157b9a411d2410713e5dd3a377e9064bd5c194a90748bbf27ea625784\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/ERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"../../../interfaces/IERC4626Upgradeable.sol\\\";\\nimport \\\"../../../utils/math/MathUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC4626 \\\"Tokenized Vault Standard\\\" as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[EIP-4626].\\n *\\n * This extension allows the minting and burning of \\\"shares\\\" (represented using the ERC20 inheritance) in exchange for\\n * underlying \\\"assets\\\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends\\n * the ERC20 standard. Any additional extensions included along it would affect the \\\"shares\\\" token represented by this\\n * contract and not the \\\"assets\\\" token which is an independent contract.\\n *\\n * [CAUTION]\\n * ====\\n * In empty (or nearly empty) ERC-4626 vaults, deposits are at high risk of being stolen through frontrunning\\n * with a \\\"donation\\\" to the vault that inflates the price of a share. This is variously known as a donation or inflation\\n * attack and is essentially a problem of slippage. Vault deployers can protect against this attack by making an initial\\n * deposit of a non-trivial amount of the asset, such that price manipulation becomes infeasible. Withdrawals may\\n * similarly be affected by slippage. Users can protect against this attack as well as unexpected slippage in general by\\n * verifying the amount received is as expected, using a wrapper that performs these checks such as\\n * https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router].\\n *\\n * Since v4.9, this implementation uses virtual assets and shares to mitigate that risk. The `_decimalsOffset()`\\n * corresponds to an offset in the decimal representation between the underlying asset's decimals and the vault\\n * decimals. This offset also determines the rate of virtual shares to virtual assets in the vault, which itself\\n * determines the initial exchange rate. While not fully preventing the attack, analysis shows that the default offset\\n * (0) makes it non-profitable, as a result of the value being captured by the virtual shares (out of the attacker's\\n * donation) matching the attacker's expected gains. With a larger offset, the attack becomes orders of magnitude more\\n * expensive than it is profitable. More details about the underlying math can be found\\n * xref:erc4626.adoc#inflation-attack[here].\\n *\\n * The drawback of this approach is that the virtual shares do capture (a very small) part of the value being accrued\\n * to the vault. Also, if the vault experiences losses, the users try to exit the vault, the virtual shares and assets\\n * will cause the first user to exit to experience reduced losses in detriment to the last users that will experience\\n * bigger losses. Developers willing to revert back to the pre-v4.9 behavior just need to override the\\n * `_convertToShares` and `_convertToAssets` functions.\\n *\\n * To learn more, check out our xref:ROOT:erc4626.adoc[ERC-4626 guide].\\n * ====\\n *\\n * _Available since v4.7._\\n */\\nabstract contract ERC4626Upgradeable is Initializable, ERC20Upgradeable, IERC4626Upgradeable {\\n    using MathUpgradeable for uint256;\\n\\n    IERC20Upgradeable private _asset;\\n    uint8 private _underlyingDecimals;\\n\\n    /**\\n     * @dev Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777).\\n     */\\n    function __ERC4626_init(IERC20Upgradeable asset_) internal onlyInitializing {\\n        __ERC4626_init_unchained(asset_);\\n    }\\n\\n    function __ERC4626_init_unchained(IERC20Upgradeable asset_) internal onlyInitializing {\\n        (bool success, uint8 assetDecimals) = _tryGetAssetDecimals(asset_);\\n        _underlyingDecimals = success ? assetDecimals : 18;\\n        _asset = asset_;\\n    }\\n\\n    /**\\n     * @dev Attempts to fetch the asset decimals. A return value of false indicates that the attempt failed in some way.\\n     */\\n    function _tryGetAssetDecimals(IERC20Upgradeable asset_) private view returns (bool, uint8) {\\n        (bool success, bytes memory encodedDecimals) = address(asset_).staticcall(\\n            abi.encodeWithSelector(IERC20MetadataUpgradeable.decimals.selector)\\n        );\\n        if (success && encodedDecimals.length >= 32) {\\n            uint256 returnedDecimals = abi.decode(encodedDecimals, (uint256));\\n            if (returnedDecimals <= type(uint8).max) {\\n                return (true, uint8(returnedDecimals));\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This\\n     * \\\"original\\\" value is cached during construction of the vault contract. If this read operation fails (e.g., the\\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals.\\n     *\\n     * See {IERC20Metadata-decimals}.\\n     */\\n    function decimals() public view virtual override(IERC20MetadataUpgradeable, ERC20Upgradeable) returns (uint8) {\\n        return _underlyingDecimals + _decimalsOffset();\\n    }\\n\\n    /** @dev See {IERC4626-asset}. */\\n    function asset() public view virtual override returns (address) {\\n        return address(_asset);\\n    }\\n\\n    /** @dev See {IERC4626-totalAssets}. */\\n    function totalAssets() public view virtual override returns (uint256) {\\n        return _asset.balanceOf(address(this));\\n    }\\n\\n    /** @dev See {IERC4626-convertToShares}. */\\n    function convertToShares(uint256 assets) public view virtual override returns (uint256) {\\n        return _convertToShares(assets, MathUpgradeable.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-convertToAssets}. */\\n    function convertToAssets(uint256 shares) public view virtual override returns (uint256) {\\n        return _convertToAssets(shares, MathUpgradeable.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-maxDeposit}. */\\n    function maxDeposit(address) public view virtual override returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /** @dev See {IERC4626-maxMint}. */\\n    function maxMint(address) public view virtual override returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /** @dev See {IERC4626-maxWithdraw}. */\\n    function maxWithdraw(address owner) public view virtual override returns (uint256) {\\n        return _convertToAssets(balanceOf(owner), MathUpgradeable.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-maxRedeem}. */\\n    function maxRedeem(address owner) public view virtual override returns (uint256) {\\n        return balanceOf(owner);\\n    }\\n\\n    /** @dev See {IERC4626-previewDeposit}. */\\n    function previewDeposit(uint256 assets) public view virtual override returns (uint256) {\\n        return _convertToShares(assets, MathUpgradeable.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-previewMint}. */\\n    function previewMint(uint256 shares) public view virtual override returns (uint256) {\\n        return _convertToAssets(shares, MathUpgradeable.Rounding.Up);\\n    }\\n\\n    /** @dev See {IERC4626-previewWithdraw}. */\\n    function previewWithdraw(uint256 assets) public view virtual override returns (uint256) {\\n        return _convertToShares(assets, MathUpgradeable.Rounding.Up);\\n    }\\n\\n    /** @dev See {IERC4626-previewRedeem}. */\\n    function previewRedeem(uint256 shares) public view virtual override returns (uint256) {\\n        return _convertToAssets(shares, MathUpgradeable.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-deposit}. */\\n    function deposit(uint256 assets, address receiver) public virtual override returns (uint256) {\\n        require(assets <= maxDeposit(receiver), \\\"ERC4626: deposit more than max\\\");\\n\\n        uint256 shares = previewDeposit(assets);\\n        _deposit(_msgSender(), receiver, assets, shares);\\n\\n        return shares;\\n    }\\n\\n    /** @dev See {IERC4626-mint}.\\n     *\\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\\n     * In this case, the shares will be minted without requiring any assets to be deposited.\\n     */\\n    function mint(uint256 shares, address receiver) public virtual override returns (uint256) {\\n        require(shares <= maxMint(receiver), \\\"ERC4626: mint more than max\\\");\\n\\n        uint256 assets = previewMint(shares);\\n        _deposit(_msgSender(), receiver, assets, shares);\\n\\n        return assets;\\n    }\\n\\n    /** @dev See {IERC4626-withdraw}. */\\n    function withdraw(uint256 assets, address receiver, address owner) public virtual override returns (uint256) {\\n        require(assets <= maxWithdraw(owner), \\\"ERC4626: withdraw more than max\\\");\\n\\n        uint256 shares = previewWithdraw(assets);\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n        return shares;\\n    }\\n\\n    /** @dev See {IERC4626-redeem}. */\\n    function redeem(uint256 shares, address receiver, address owner) public virtual override returns (uint256) {\\n        require(shares <= maxRedeem(owner), \\\"ERC4626: redeem more than max\\\");\\n\\n        uint256 assets = previewRedeem(shares);\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n        return assets;\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\\n     */\\n    function _convertToShares(uint256 assets, MathUpgradeable.Rounding rounding) internal view virtual returns (uint256) {\\n        return assets.mulDiv(totalSupply() + 10 ** _decimalsOffset(), totalAssets() + 1, rounding);\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\\n     */\\n    function _convertToAssets(uint256 shares, MathUpgradeable.Rounding rounding) internal view virtual returns (uint256) {\\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 10 ** _decimalsOffset(), rounding);\\n    }\\n\\n    /**\\n     * @dev Deposit/mint common workflow.\\n     */\\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\\n        // If _asset is ERC777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\\n        // assets are transferred and before the shares are minted, which is a valid state.\\n        // slither-disable-next-line reentrancy-no-eth\\n        SafeERC20Upgradeable.safeTransferFrom(_asset, caller, address(this), assets);\\n        _mint(receiver, shares);\\n\\n        emit Deposit(caller, receiver, assets, shares);\\n    }\\n\\n    /**\\n     * @dev Withdraw/redeem common workflow.\\n     */\\n    function _withdraw(\\n        address caller,\\n        address receiver,\\n        address owner,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal virtual {\\n        if (caller != owner) {\\n            _spendAllowance(owner, caller, shares);\\n        }\\n\\n        // If _asset is ERC777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\\n        // shares are burned and after the assets are transferred, which is a valid state.\\n        _burn(owner, shares);\\n        SafeERC20Upgradeable.safeTransfer(_asset, receiver, assets);\\n\\n        emit Withdraw(caller, receiver, owner, assets, shares);\\n    }\\n\\n    function _decimalsOffset() internal view virtual returns (uint8) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa047a2707d2fd6224f0cbd77e5f56320dc58ff1ddfd91d491edd5150055a19c2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd60f939a3ca0199014d079b4dd66aa757954334947d81eb5c1d35d7a83061ab3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x23b997be73d3dd46885262704f0f8cfc7273fdadfe303d37969a9561373972b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"contracts/protocol/RWALeverage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\r\\nimport \\\"./RWAVault.sol\\\";\\r\\n\\r\\nerror InvalidInputs(uint256 _amount, uint32 _lockingPeriodInSeconds);\\r\\nerror NotUnlocked(address _staker);\\r\\nerror AlreadyUnstaked(address _staker, uint256 _index);\\r\\nerror InvalidAmount(uint256 _amount);\\r\\nerror AlreadyBorrowed(address _staker, uint256 _amount);\\r\\nerror NotBorrowed(address _staker);\\r\\n\\r\\n/// @title RWA Leverage\\r\\n/// @notice Extension of RWA Vault to manage liquidity lockups and leverage holdings\\r\\ncontract RWALeverage is\\r\\n    Initializable,\\r\\n    AccessControlUpgradeable,\\r\\n    UUPSUpgradeable\\r\\n{\\r\\n    bytes32 public constant ROLE_LIQUIDITY_MANAGER = keccak256(\\\"ROLE_LIQUIDITY_MANAGER\\\");\\r\\n    address public rwaToken;\\r\\n    uint32 public slice;\\r\\n    uint32 public maxStakeDurationAllowed;\\r\\n    uint32 public minStakeDurationAllowed;\\r\\n    uint128 public borrowAPY;\\r\\n    uint64 public leverageAllowed;\\r\\n    uint64 public penaltyAPY;\\r\\n    PoolStatus public status;\\r\\n    mapping(address => StakeInfo[]) public stakes;\\r\\n    mapping(address => LeverageInfo) public leverages;\\r\\n\\r\\n    struct StakeInfo {\\r\\n        uint256 amount;\\r\\n        uint32 lockTime;\\r\\n        uint32 unlockTime;\\r\\n        bool isUnstaked;        \\r\\n    }\\r\\n\\r\\n    struct LeverageInfo {\\r\\n        uint256 totalStaked;\\r\\n        uint256 totalBorrowed;\\r\\n        uint128 borrowAPY;\\r\\n        uint32 borrowTime;\\r\\n        uint32 paymentDue;\\r\\n    }\\r\\n\\r\\n    struct LiquidateInfo {\\r\\n        address borrower;\\r\\n        uint256 totalStaked;\\r\\n        uint256 totalBorrowed;\\r\\n        uint128 borrowAPY;\\r\\n        uint32 borrowTime;\\r\\n        uint32 paymentDue;\\r\\n    }\\r\\n    \\r\\n    enum PoolStatus {PENDING, ACTIVE, CLOSE}\\r\\n\\r\\n    event LiquidityManagerAdded(address _account);\\r\\n    event LiquidityManagerRemoved(address _account);\\r\\n    event AdminTransferred(address _oldOwner, address _newOwner);\\r\\n    event PoolStatusUpdated(PoolStatus _prevStatus, PoolStatus _newStatus);\\r\\n    event Staked(address indexed _staker, uint256 _amount, uint256 _index);\\r\\n    event Unstaked(address indexed _staker, uint256 _amount, uint256 _index);\\r\\n    event SlicePeriodUpdated(uint32 _prevValue, uint256 _newValue);\\r\\n    event MinMaxStakeDurationUpdated(uint32 _min, uint32 _max, uint32 _newMin, uint32 _newMax);\\r\\n    event BorrowAPYUpdated(uint128 _prevAPY, uint128 _newAPY);\\r\\n    event LeverageAllowedUpdated(uint64 _prevValue, uint64 _newValue);\\r\\n    event PenaltyAPYUpdated(uint64 _prevValue, uint64 _newValue);\\r\\n    event Borrowed(address indexed _borrower, uint256 _amount, uint128 _borrowAPY, uint32 _paymentDue);\\r\\n    event Paid(address indexed _borrower, uint256 _amount, uint128 _borrowAPY, uint32 _borrowTime);\\r\\n    event Liquidated(address indexed _borrower, LeverageInfo _leverage, LiquidateInfo _liquidate);\\r\\n    event Withdrawn(address indexed _to, uint256 _amount);\\r\\n\\r\\n    modifier notZeroAddress(address _account) {\\r\\n        require(_account != address(0), \\\"address cannot be zero\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    constructor() {\\r\\n        _disableInitializers();\\r\\n    }\\r\\n\\r\\n    /// @notice Initializes contract\\r\\n    /// @param _admin address of admin that is resposible for managing liquidity lockup operations\\r\\n    /// @param _rwaToken address of RWA Vault\\r\\n    /// @param _liquidityManager address of liquidity manager that is responsible for liquidations of loans\\r\\n    function initialize(\\r\\n        address _admin,\\r\\n        address _rwaToken,\\r\\n        address _liquidityManager\\r\\n    )\\r\\n        public\\r\\n        initializer\\r\\n        notZeroAddress(_rwaToken)\\r\\n    {\\r\\n        __AccessControl_init();\\r\\n        __UUPSUpgradeable_init();\\r\\n        \\r\\n        _grantRole(DEFAULT_ADMIN_ROLE, _admin);\\r\\n        _grantRole(ROLE_LIQUIDITY_MANAGER, _liquidityManager);\\r\\n        rwaToken = _rwaToken;\\r\\n        slice = 30 days;\\r\\n        minStakeDurationAllowed = 30 days;\\r\\n        maxStakeDurationAllowed = 360 days;\\r\\n        borrowAPY = 1200;\\r\\n        leverageAllowed = 7000;\\r\\n        penaltyAPY = 500;\\r\\n    }\\r\\n\\r\\n    /// @notice returns number of lockups commited by lender\\r\\n    /// @param _staker address of lender\\r\\n    function numberOfStakes(address _staker) external view returns(uint256) {\\r\\n        return stakes[_staker].length;\\r\\n    }\\r\\n\\r\\n    /// @notice returns stakes of given user\\r\\n    /// @param _staker address of staker \\r\\n    function allStakes(address _staker) external view returns(StakeInfo[] memory) {\\r\\n        return stakes[_staker];\\r\\n    }\\r\\n\\r\\n    /// @notice returns true if given address has liquidity manager role\\r\\n    /// @param _account address to query for role\\r\\n    function isLiquidityManager(address _account) public view returns (bool) {\\r\\n        return hasRole(ROLE_LIQUIDITY_MANAGER, _account);\\r\\n    }\\r\\n    \\r\\n    /// @notice stakes RWA vault shares for given period\\r\\n    /// @param _amount amount of shares to stake\\r\\n    /// @param _lockingPeriodInSeconds locking period converted in seconds\\r\\n    function stake(uint256 _amount, uint32 _lockingPeriodInSeconds) external {\\r\\n        if(_amount == 0 || (_lockingPeriodInSeconds % slice != 0) || (_lockingPeriodInSeconds < minStakeDurationAllowed) || (_lockingPeriodInSeconds > maxStakeDurationAllowed)) {\\r\\n            revert InvalidInputs(_amount, _lockingPeriodInSeconds);\\r\\n        }\\r\\n        if(status != PoolStatus.ACTIVE) revert PoolIsNotActive();\\r\\n        SafeERC20Upgradeable.safeTransferFrom(IERC20Upgradeable(rwaToken), _msgSender(), address(this), _amount);\\r\\n        uint32 _unlockTime = uint32(block.timestamp) + _lockingPeriodInSeconds;\\r\\n        emit Staked(_msgSender(), _amount, stakes[_msgSender()].length);\\r\\n        stakes[_msgSender()].push(StakeInfo(_amount, uint32(block.timestamp), _unlockTime, false));\\r\\n        leverages[_msgSender()].totalStaked += _amount;\\r\\n    }\\r\\n\\r\\n    /// @notice unstakes given position\\r\\n    /// @param _index position number\\r\\n    function unStake(uint256 _index) external {\\r\\n        if(status != PoolStatus.ACTIVE) revert PoolIsNotActive();\\r\\n        StakeInfo memory _stake = stakes[_msgSender()][_index];\\r\\n        LeverageInfo memory _leverage = leverages[_msgSender()];\\r\\n        if(_stake.isUnstaked) revert AlreadyUnstaked(_msgSender(), _index);\\r\\n        if(block.timestamp < _stake.unlockTime) revert NotUnlocked(_msgSender());\\r\\n        if(_stake.amount > (_leverage.totalStaked * leverageAllowed / 10000) - _leverage.totalBorrowed) revert InvalidAmount(_stake.amount);\\r\\n        _stake.isUnstaked = true;\\r\\n        _leverage.totalStaked -= _stake.amount;\\r\\n        SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(rwaToken), _msgSender(), _stake.amount);\\r\\n        emit Unstaked(_msgSender(), _stake.amount, _index);\\r\\n    }\\r\\n\\r\\n    /// @notice allow to borrow pool tokens from RWA vault reserve balance\\r\\n    /// @param _amount amount of tokens to be borrowed\\r\\n    /// @param _borrowPeriod borrowing period in seconds \\r\\n    function borrow(uint256 _amount, uint32 _borrowPeriod) external {\\r\\n        if(status != PoolStatus.ACTIVE) revert PoolIsNotActive();\\r\\n        LeverageInfo memory _leverage = leverages[_msgSender()];\\r\\n        if(_leverage.totalBorrowed != 0) revert AlreadyBorrowed(_msgSender(), _leverage.totalBorrowed);\\r\\n        uint256 _userAssetValue = RWAVault(rwaToken).convertToAssets(_leverage.totalStaked);\\r\\n        if(_amount > _userAssetValue * leverageAllowed / 10000) revert InvalidAmount(_amount);\\r\\n        uint32 _paymentDue = uint32(block.timestamp) + _borrowPeriod;\\r\\n        leverages[_msgSender()] = LeverageInfo(_leverage.totalStaked, _amount, borrowAPY, uint32(block.timestamp), _paymentDue);\\r\\n        RWAVault(rwaToken).grant(_msgSender(), _amount);\\r\\n        emit Borrowed(_msgSender(), _amount, borrowAPY, _paymentDue);\\r\\n    }\\r\\n\\r\\n    /// @notice pays existing loan, penalty will be charged in case of late payment\\r\\n    function pay() external {\\r\\n        if(status != PoolStatus.ACTIVE) revert PoolIsNotActive();\\r\\n        LeverageInfo memory _leverage = leverages[_msgSender()];\\r\\n        if(_leverage.totalBorrowed == 0) revert NotBorrowed(_msgSender());\\r\\n        uint256 _borrowAPY = (block.timestamp > _leverage.paymentDue) ?\\r\\n                                _leverage.borrowAPY + penaltyAPY :\\r\\n                                _leverage.borrowAPY;\\r\\n        uint256 _payment = _leverage.totalBorrowed + _leverage.totalBorrowed * _borrowAPY * (block.timestamp - _leverage.borrowTime) / (10000 * 360 days);\\r\\n        SafeERC20Upgradeable.safeTransferFrom(IERC20Upgradeable(RWAVault(rwaToken).asset()), _msgSender(), rwaToken, _payment);\\r\\n        leverages[_msgSender()] = LeverageInfo(_leverage.totalStaked, 0, 0, 0, 0);\\r\\n        emit Paid(_msgSender(), _payment, _leverage.borrowAPY, _leverage.borrowTime);\\r\\n    }\\r\\n\\r\\n    /// @notice liquidates user loans in batch\\r\\n    /// @param _liquidate liquidation information\\r\\n    function liquidate(LiquidateInfo[] calldata _liquidate) external onlyRole(ROLE_LIQUIDITY_MANAGER) {\\r\\n        for(uint i; i < _liquidate.length; i++) {\\r\\n            emit Liquidated(_liquidate[i].borrower, leverages[_liquidate[i].borrower], _liquidate[i]);\\r\\n            leverages[_liquidate[i].borrower] = LeverageInfo(\\r\\n                                                    _liquidate[i].totalStaked,\\r\\n                                                    _liquidate[i].totalBorrowed,\\r\\n                                                    _liquidate[i].borrowAPY,\\r\\n                                                    _liquidate[i].borrowTime,\\r\\n                                                    _liquidate[i].paymentDue\\r\\n                                                );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice withdraws RWA Vault shares from this contract to RWA Vault\\r\\n    function withdraw(uint256 _amount) external onlyRole(ROLE_LIQUIDITY_MANAGER) {\\r\\n        SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(rwaToken), RWAVault(rwaToken).treasury(), _amount);\\r\\n        emit Withdrawn(RWAVault(rwaToken).treasury(), _amount);\\r\\n    }\\r\\n\\r\\n    /// @notice updates pool status\\r\\n    /// @param _status status to update\\r\\n    function updatePoolStatus(PoolStatus _status) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        emit PoolStatusUpdated(status, _status);\\r\\n        status = _status;\\r\\n    }\\r\\n\\r\\n    /// @notice updates slice period for staking\\r\\n    /// @param _slice slice period in seconds\\r\\n    function updateSlicePeriod(uint32 _slice) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        emit SlicePeriodUpdated(slice, _slice);\\r\\n        slice = _slice;\\r\\n    }\\r\\n\\r\\n    /// @notice updates minimum and maximum period allowed for staking\\r\\n    /// @param _min minimum lockup period in seconds\\r\\n    /// @param _max maximum lockup period in seconds\\r\\n    function updateMinMaxDurationAllowed(uint32 _min, uint32 _max) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        emit MinMaxStakeDurationUpdated(minStakeDurationAllowed, maxStakeDurationAllowed, _min, _max);\\r\\n        minStakeDurationAllowed = _min;\\r\\n        maxStakeDurationAllowed = _max;\\r\\n    }\\r\\n\\r\\n    /// @notice updates borrow APY that will be charged to new loans\\r\\n    /// @param _borrowAPY percentage in 2 basis point (ex: for 10.03% => 1003)\\r\\n    function updateBorrowAPY(uint128 _borrowAPY) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        emit BorrowAPYUpdated(borrowAPY, _borrowAPY);\\r\\n        borrowAPY = _borrowAPY;\\r\\n    }\\r\\n\\r\\n    /// @notice updates the allowed leverage for the system\\r\\n    /// @param _leverageAllowed the new leverage value to be set\\r\\n    function updateLeverageAllowed(uint64 _leverageAllowed) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        emit LeverageAllowedUpdated(leverageAllowed, _leverageAllowed);\\r\\n        leverageAllowed = _leverageAllowed;\\r\\n    }\\r\\n\\r\\n    /// @notice Updates the penalty APY for overdue loans\\r\\n    /// @param _penaltyAPY percentage in 2 basis point (ex: for 10.03% => 1003)\\r\\n    function updatePenaltyAPY(uint64 _penaltyAPY) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        emit PenaltyAPYUpdated(penaltyAPY, _penaltyAPY);\\r\\n        penaltyAPY = _penaltyAPY;\\r\\n    }\\r\\n\\r\\n    /// @notice adds new liquidity manager\\r\\n    function addLiquidityManager(address _account) public onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        grantRole(ROLE_LIQUIDITY_MANAGER, _account);\\r\\n        emit LiquidityManagerAdded(_account);\\r\\n    }\\r\\n\\r\\n    /// @notice removes existing liquidity manager\\r\\n    function removeLiquidityManager(address _account) public onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        revokeRole(ROLE_LIQUIDITY_MANAGER, _account);\\r\\n        emit LiquidityManagerRemoved(_account);\\r\\n    }\\r\\n\\r\\n    /// @notice transfer admin role to new account\\r\\n    function transferAdmin(address _newOwner) public {\\r\\n        grantRole(DEFAULT_ADMIN_ROLE, _newOwner);\\r\\n        revokeRole(DEFAULT_ADMIN_ROLE, _msgSender());\\r\\n        emit AdminTransferred(_msgSender(), _newOwner);\\r\\n    }\\r\\n\\r\\n    /// @notice grants a role to account\\r\\n    function grantRole(bytes32 role, address _account)\\r\\n        public\\r\\n        virtual\\r\\n        override\\r\\n        onlyRole(getRoleAdmin(role))\\r\\n        notZeroAddress(_account)\\r\\n    {\\r\\n        _grantRole(role, _account);\\r\\n    }\\r\\n\\r\\n    // revokes a role\\r\\n    function revokeRole(bytes32 role, address _account)\\r\\n        public\\r\\n        override\\r\\n        onlyRole(getRoleAdmin(role))        \\r\\n        notZeroAddress(_account)\\r\\n    {\\r\\n        _revokeRole(role, _account);\\r\\n    }\\r\\n\\r\\n    // @notice internal function to check authorized upgrades\\r\\n    function _authorizeUpgrade(address _newImplementation)\\r\\n        internal\\r\\n        override\\r\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\r\\n    {}\\r\\n}\",\"keccak256\":\"0xbd78d80cf10d2318839418513347a8e178e323ff90b87a112e1f4d16bb3f0d50\",\"license\":\"MIT\"},\"contracts/protocol/RWAVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol\\\";\\r\\n\\r\\nerror PoolIsNotActive();\\r\\nerror InvalidPoolSize(uint256 _poolSize);\\r\\nerror InvalidStatusUpdate();\\r\\nerror WithdrawalPending();\\r\\n\\r\\n/// @title RWA Vault\\r\\n/// @notice RWA Vault is tokenized vault built using ERC-4626 standard\\r\\ncontract RWAVault is\\r\\n    Initializable,\\r\\n    AccessControlUpgradeable,\\r\\n    UUPSUpgradeable,\\r\\n    PausableUpgradeable,\\r\\n    ERC4626Upgradeable\\r\\n{\\r\\n    bytes32 public constant ROLE_ORACLE_MANAGER = keccak256(\\\"ROLE_ORACLE_MANAGER\\\");\\r\\n    bytes32 public constant ROLE_GRANT_MANAGER = keccak256(\\\"ROLE_GRANT_MANAGER\\\");\\r\\n    address public poolToken;\\r\\n    address public treasury;\\r\\n    PoolStatus public status;\\r\\n    uint256 public poolSize;\\r\\n    uint256 public assetUnderManagement;\\r\\n    uint64 public activationTime;\\r\\n    uint64 public nonReservePercentage;\\r\\n    \\r\\n    enum PoolStatus {PENDING, ACTIVE, CLOSE}\\r\\n    \\r\\n    event OracleManagerAdded(address _account);\\r\\n    event OracleManagerRemoved(address _account);\\r\\n    event GrantManagerAdded(address _account);\\r\\n    event GrantManagerRemoved(address _account);\\r\\n    event AdminTransferred(address _oldOwner, address _newOwner);\\r\\n    event PoolStatusUpdated(address indexed _by, PoolStatus _prevStatus, PoolStatus _newStatus);\\r\\n    event AssetUnderManagementUpdated(address indexed _by, uint256 _prevValue, uint256 _newValue);\\r\\n    event Granted(address indexed _by, address _to, uint256 _amount);\\r\\n    \\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    constructor() {\\r\\n        _disableInitializers();\\r\\n    }\\r\\n\\r\\n    /// @notice Initializes the contract\\r\\n    /// @param _poolManager address of pool manager\\r\\n    /// @param _poolToken address of the underlying token used for the vault for accounting\\r\\n    /// @param _treasury address of treasury that is responsible for deploying pool tokens into RWAs\\r\\n    /// @param _oracleManager address of oracle manager that is responsible \\r\\n    ///                       for update real time value of underlying RWAs\\r\\n    /// @param _poolSize maximum amount pool can manage\\r\\n    function initialize(\\r\\n        address _poolManager,\\r\\n        address _poolToken,\\r\\n        address _treasury,\\r\\n        address _oracleManager,\\r\\n        uint256 _poolSize\\r\\n    )\\r\\n        public\\r\\n        initializer\\r\\n    {\\r\\n        __AccessControl_init();\\r\\n        __UUPSUpgradeable_init();\\r\\n        __Pausable_init();\\r\\n        __ERC4626_init(IERC20Upgradeable(_poolToken));\\r\\n        __ERC20_init(\\\"RWA Vault\\\", \\\"RWAV\\\");\\r\\n\\r\\n        _grantRole(DEFAULT_ADMIN_ROLE, _poolManager);\\r\\n        _grantRole(ROLE_ORACLE_MANAGER, _oracleManager);\\r\\n        poolToken = _poolToken;\\r\\n        treasury = _treasury;\\r\\n        poolSize = _poolSize;\\r\\n        nonReservePercentage = 7500;\\r\\n    }\\r\\n\\r\\n    /// @notice returns the total amount of underlying assets held by the vault\\r\\n    function totalAssets() public view virtual override returns (uint256) {\\r\\n        return  IERC20Upgradeable(poolToken).balanceOf(address(this)) +\\r\\n                IERC20Upgradeable(poolToken).balanceOf(treasury) +\\r\\n                assetUnderManagement;\\r\\n    }\\r\\n\\r\\n    /// @notice returns the maximum amount of underlying assets that can be deposited\\r\\n    function maxDeposit(address) public view virtual override returns (uint256) {\\r\\n        return poolSize - totalAssets();\\r\\n    }\\r\\n\\r\\n    /// @notice returns the maximum amount of shares that can be minted\\r\\n    function maxMint(address) public view virtual override returns (uint256) {\\r\\n        return previewDeposit(poolSize - totalAssets());\\r\\n    }\\r\\n\\r\\n    /// @notice  returns the maximum amount of underlying assets that can be withdrawn\\r\\n    function maxWithdraw(address) public view virtual override returns (uint256) {\\r\\n        return IERC20Upgradeable(poolToken).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /// @notice returns the maximum amount of shares that can be redeemed\\r\\n    function maxRedeem(address) public view virtual override returns (uint256) {\\r\\n        return _convertToShares(maxWithdraw(address(0)), MathUpgradeable.Rounding.Down);\\r\\n    }\\r\\n\\r\\n    /// @notice returns real time supplied APY of the vault \\r\\n    function suppliedAPY() public view returns (int256 APY) {\\r\\n        int256 _amount = int256(10 ** decimals());\\r\\n        int256 amount = int256(convertToAssets(uint256(_amount)));\\r\\n        int256 durationInDays = int256((block.timestamp - activationTime) / 1 days);\\r\\n        APY = ((amount - _amount) * 1e4 * 365) / (_amount * durationInDays);\\r\\n    }\\r\\n\\r\\n    /// @notice returns true if given address has oracle manager role\\r\\n    /// @param _account address to query for role\\r\\n    function isOracleManager(address _account) public view returns (bool) {\\r\\n        return hasRole(ROLE_ORACLE_MANAGER, _account);\\r\\n    }\\r\\n\\r\\n    /// @notice returns true if given address has grant manager role\\r\\n    /// @param _account address to query for role\\r\\n    function isGrantManager(address _account) public view returns (bool) {\\r\\n        return hasRole(ROLE_GRANT_MANAGER, _account);\\r\\n    }\\r\\n\\r\\n    /// @notice deposits assets of underlying tokens into the vault and grants ownership of shares to receiver\\r\\n    /// @param assets amount of pool token to be deposited into vault \\r\\n    /// @param receiver address of receiver\\r\\n    function deposit(uint256 assets, address receiver) public virtual override returns (uint256 shares) {\\r\\n        if(status != PoolStatus.ACTIVE) revert PoolIsNotActive();\\r\\n        shares = super.deposit(assets, receiver);\\r\\n        SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(poolToken), treasury, (assets * nonReservePercentage) / 10000);\\r\\n    }\\r\\n\\r\\n    /// @notice mints exactly shares vault shares to receiver by depositing assets of underlying tokens\\r\\n    /// @param shares amount of rwa vault shares to be minted from vault \\r\\n    /// @param receiver address of receiver\\r\\n    function mint(uint256 shares, address receiver) public virtual override returns (uint256 assets) {\\r\\n        if(status != PoolStatus.ACTIVE) revert PoolIsNotActive();\\r\\n        assets = super.mint(shares, receiver);\\r\\n        SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(poolToken), treasury, (assets * nonReservePercentage) / 10000);\\r\\n    }\\r\\n\\r\\n    /// @notice burns shares from owner and send exactly assets token from the vault to receiver\\r\\n    /// @param assets amount of pool token to be withdrawn from vault \\r\\n    /// @param receiver address of receiver\\r\\n    /// @param owner address of owner\\r\\n    function withdraw(uint256 assets, address receiver, address owner) public virtual override returns (uint256) {\\r\\n        if(status != PoolStatus.ACTIVE) revert PoolIsNotActive();\\r\\n        return super.withdraw(assets, receiver, owner);\\r\\n    }\\r\\n\\r\\n    /// @notice redeems a specific number of shares from owner and sends assets of underlying token from the vault to receiver\\r\\n    /// @param shares amount of shares to be redeemed from vault \\r\\n    /// @param receiver address of receiver\\r\\n    /// @param owner address of owner\\r\\n    function redeem(uint256 shares, address receiver, address owner) public virtual override returns (uint256) {\\r\\n        if(status != PoolStatus.ACTIVE) revert PoolIsNotActive();\\r\\n        return super.redeem(shares, receiver, owner);\\r\\n    }\\r\\n\\r\\n    /// @notice updates asset under management i.e. total value of underlying RWAs in terms of pool token\\r\\n    /// @dev oracle should calculate AUM on regular interval and record on-chain\\r\\n    /// @param _assetUnderManagement total value of underlying RWAs in terms of pool token \\r\\n    function updateAssetUnderManagement(uint256 _assetUnderManagement) external onlyRole(ROLE_ORACLE_MANAGER) {\\r\\n        if(status != PoolStatus.ACTIVE) revert PoolIsNotActive();\\r\\n        emit AssetUnderManagementUpdated(_msgSender(), assetUnderManagement, _assetUnderManagement);\\r\\n        assetUnderManagement = _assetUnderManagement;\\r\\n    }\\r\\n    \\r\\n    /// @notice grants tokens to borrower\\r\\n    /// @param _to address of borrower\\r\\n    /// @param _amount amount of pool tokens to grant as a loan\\r\\n    function grant(address _to, uint256 _amount) external onlyRole(ROLE_GRANT_MANAGER) {\\r\\n        SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(poolToken), _to, _amount);\\r\\n        emit Granted(_msgSender(), _to, _amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Updates pool size\\r\\n    /// @param _poolSize new value to update\\r\\n    function updatePoolSize(uint256 _poolSize) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        if(_poolSize < totalAssets()) revert InvalidPoolSize(_poolSize);\\r\\n        poolSize = _poolSize;\\r\\n    }\\r\\n\\r\\n    /// @notice activates the pool for deposit, withdraw\\r\\n    function activatePool() external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        if(status != PoolStatus.PENDING) revert InvalidStatusUpdate();\\r\\n        status = PoolStatus.ACTIVE;\\r\\n        activationTime = uint64(block.timestamp);\\r\\n        emit PoolStatusUpdated(_msgSender(), PoolStatus.PENDING, PoolStatus.ACTIVE);\\r\\n    }\\r\\n\\r\\n    /// @notice closes the pool after full settlement\\r\\n    function closePool() external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        if(status == PoolStatus.CLOSE) revert InvalidStatusUpdate();\\r\\n        if(totalAssets() != 0 && totalSupply() != 0)  revert WithdrawalPending();\\r\\n        emit PoolStatusUpdated(_msgSender(), status, PoolStatus.CLOSE);\\r\\n        status = PoolStatus.CLOSE;\\r\\n    }\\r\\n\\r\\n    /// @notice updates percentage of amount that deducted from each depoist and sent to treasury\\r\\n    /// @param _percentage new percentage in 2 basis point (ex: for 10.30% => 1003) \\r\\n    function updateNonReservePercentage(uint64 _percentage) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        nonReservePercentage = _percentage;\\r\\n    }\\r\\n\\r\\n    /// @notice pauses the contract\\r\\n    function pause() external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    /// @notice unpauses the contract\\r\\n    function unpause() external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    /// @notice adds new oracle manager\\r\\n    function addOracleManager(address _account) public onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        grantRole(ROLE_ORACLE_MANAGER, _account);\\r\\n        emit OracleManagerAdded(_account);\\r\\n    }\\r\\n\\r\\n    /// @notice removes existing oracle manager\\r\\n    function removeOracleManager(address _account) public onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        revokeRole(ROLE_ORACLE_MANAGER, _account);\\r\\n        emit OracleManagerRemoved(_account);\\r\\n    }\\r\\n\\r\\n    /// @notice adds new grant manager\\r\\n    function addGrantManager(address _account) public onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        grantRole(ROLE_GRANT_MANAGER, _account);\\r\\n        emit GrantManagerAdded(_account);\\r\\n    }\\r\\n\\r\\n    /// @notice removes existing grant manager\\r\\n    function removeGrantManager(address _account) public onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        revokeRole(ROLE_GRANT_MANAGER, _account);\\r\\n        emit GrantManagerRemoved(_account);\\r\\n    }\\r\\n\\r\\n    /// @notice transfer admin role to new account\\r\\n    function transferAdmin(address _newOwner) public {\\r\\n        grantRole(DEFAULT_ADMIN_ROLE, _newOwner);\\r\\n        revokeRole(DEFAULT_ADMIN_ROLE, _msgSender());\\r\\n        emit AdminTransferred(_msgSender(), _newOwner);\\r\\n    }    \\r\\n\\r\\n    /// @notice grants a role to account\\r\\n    function grantRole(bytes32 role, address _account)\\r\\n        public\\r\\n        virtual\\r\\n        override\\r\\n        onlyRole(getRoleAdmin(role))\\r\\n        whenNotPaused\\r\\n    {\\r\\n        _grantRole(role, _account);\\r\\n    }\\r\\n\\r\\n    // revokes a role\\r\\n    function revokeRole(bytes32 role, address _account)\\r\\n        public\\r\\n        override\\r\\n        onlyRole(getRoleAdmin(role))        \\r\\n        whenNotPaused\\r\\n    {\\r\\n        _revokeRole(role, _account);\\r\\n    }\\r\\n\\r\\n    /// @notice hook called at time of transfer\\r\\n    function _beforeTokenTransfer(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    )\\r\\n        internal\\r\\n        override\\r\\n        whenNotPaused\\r\\n    {\\r\\n        super._beforeTokenTransfer(_from, _to, _amount);\\r\\n    }\\r\\n\\r\\n    // @notice internal function to check authorized upgrades\\r\\n    function _authorizeUpgrade(address _newImplementation)\\r\\n        internal\\r\\n        override\\r\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\r\\n    {}\\r\\n}\",\"keccak256\":\"0x9ebad00d5c7df6999153f1fdaddea0dacd2380851c8b8fdd5a568c21f58be67b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b506200002062000026565b620000e7565b600054610100900460ff1615620000935760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811614620000e5576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6080516134896200011f60003960008181611181015281816111c10152818161136d015281816113ad015261143c01526134896000f3fe60806040526004361061023b5760003560e01c80635d3eea911161012e578063aaad046c116100ab578063d2551f1c1161006f578063d2551f1c146107dd578063d547741f146107fd578063df7054e51461081d578063df89b3441461083d578063dfef66791461085d57600080fd5b8063aaad046c14610716578063c01d099914610738578063c0c53b8b14610765578063ca1dcc7e14610785578063cabca643146107a557600080fd5b80638a5a0caa116100f25780638a5a0caa1461067a5780638d7d4828146106a15780638fece317146106c157806391d14854146106e1578063a217fddf1461070157600080fd5b80635d3eea911461055c57806375829def1461057c57806378a96cc01461059c5780637f371624146105bc5780638a495740146105e057600080fd5b80632e1a7d4d116101bc578063460316201161018057806346031620146104a15780634ca7fcf2146104c15780634f1ef286146104e557806352d1902d146104f8578063584b62a11461050d57600080fd5b80632e1a7d4d146104015780632f2ff15d1461042157806336568abe146104415780633659cfe6146104615780633944d8bf1461048157600080fd5b80631b9265b8116102035780631b9265b81461030f578063200d2ed214610324578063248a9ca31461034b57806326047c5914610389578063288e284b146103c857600080fd5b806301ffc9a714610240578063037cf965146102755780630c5bf3511461029757806313b9cc72146102cf57806318ee3edc146102ef575b600080fd5b34801561024c57600080fd5b5061026061025b366004612b9d565b610893565b60405190151581526020015b60405180910390f35b34801561028157600080fd5b50610295610290366004612bc7565b6108ca565b005b3480156102a357600080fd5b5060fb546102b7906001600160a01b031681565b6040516001600160a01b03909116815260200161026c565b3480156102db57600080fd5b506102956102ea366004612bf0565b61094c565b3480156102fb57600080fd5b5061029561030a366004612c11565b6109c0565b34801561031b57600080fd5b50610295610c5e565b34801561033057600080fd5b5060fd5461033e9060ff1681565b60405161026c9190612cbd565b34801561035757600080fd5b5061037b610366366004612ccb565b60009081526065602052604090206001015490565b60405190815260200161026c565b34801561039557600080fd5b5060fc546103b090600160801b90046001600160401b031681565b6040516001600160401b03909116815260200161026c565b3480156103d457600080fd5b5060fb546103ec90600160c01b900463ffffffff1681565b60405163ffffffff909116815260200161026c565b34801561040d57600080fd5b5061029561041c366004612ccb565b610f41565b34801561042d57600080fd5b5061029561043c366004612cf9565b6110ac565b34801561044d57600080fd5b5061029561045c366004612cf9565b6110f8565b34801561046d57600080fd5b5061029561047c366004612d29565b611176565b34801561048d57600080fd5b5061029561049c366004612d29565b611256565b3480156104ad57600080fd5b506102956104bc366004612d5f565b6112ba565b3480156104cd57600080fd5b5060fb546103ec90600160e01b900463ffffffff1681565b6102956104f3366004612da8565b611362565b34801561050457600080fd5b5061037b61142f565b34801561051957600080fd5b5061052d610528366004612e6b565b6114e2565b60405161026c949392919093845263ffffffff9283166020850152911660408301521515606082015260800190565b34801561056857600080fd5b50610295610577366004612ccb565b61153a565b34801561058857600080fd5b50610295610597366004612d29565b61178b565b3480156105a857600080fd5b506102956105b7366004612e97565b6117e8565b3480156105c857600080fd5b5060fb546103ec90600160a01b900463ffffffff1681565b3480156105ec57600080fd5b5061063e6105fb366004612d29565b60ff602052600090815260409020805460018201546002909201549091906001600160801b0381169063ffffffff600160801b8204811691600160a01b90041685565b6040805195865260208601949094526001600160801b039092169284019290925263ffffffff918216606084015216608082015260a00161026c565b34801561068657600080fd5b5060fc546103b090600160c01b90046001600160401b031681565b3480156106ad57600080fd5b506102956106bc366004612ed1565b6119e6565b3480156106cd57600080fd5b506102956106dc366004612e97565b611a64565b3480156106ed57600080fd5b506102606106fc366004612cf9565b611dae565b34801561070d57600080fd5b5061037b600081565b34801561072257600080fd5b5061037b60008051602061343483398151915281565b34801561074457600080fd5b50610758610753366004612d29565b611dd9565b60405161026c9190612eec565b34801561077157600080fd5b50610295610780366004612f5b565b611e85565b34801561079157600080fd5b506102956107a0366004612bc7565b612041565b3480156107b157600080fd5b5060fc546107c5906001600160801b031681565b6040516001600160801b03909116815260200161026c565b3480156107e957600080fd5b506102956107f8366004612d29565b6120c8565b34801561080957600080fd5b50610295610818366004612cf9565b612124565b34801561082957600080fd5b50610295610838366004612fa6565b612170565b34801561084957600080fd5b50610260610858366004612d29565b6121ed565b34801561086957600080fd5b5061037b610878366004612d29565b6001600160a01b0316600090815260fe602052604090205490565b60006001600160e01b03198216637965db0b60e01b14806108c457506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006108d581612207565b60fc54604080516001600160401b03600160c01b9093048316815291841660208301527f9b9459a402561ae03e196d64f242998d8df6e6886e44cdd3663bd3a1c5f727c6910160405180910390a15060fc80546001600160401b03909216600160c01b026001600160c01b03909216919091179055565b600061095781612207565b60fd546040517fbdbabe6c44fbdbeac28bc3ae9eb1acc2d06c4a5f916867e42aeb583558f9a115916109909160ff909116908590612fc1565b60405180910390a160fd805483919060ff191660018360028111156109b7576109b7612c85565b02179055505050565b6000805160206134348339815191526109d881612207565b60005b82811015610c58578383828181106109f5576109f5612fdc565b610a0b92602060c0909202019081019150612d29565b6001600160a01b03167f598f4701add317b9349956ff4eb309235a6f01efb81a0689e938b45ccfa9386360ff6000878786818110610a4b57610a4b612fdc565b610a6192602060c0909202019081019150612d29565b6001600160a01b03166001600160a01b03168152602001908152602001600020868685818110610a9357610a93612fdc565b905060c00201604051610aa7929190612ff2565b60405180910390a26040518060a00160405280858584818110610acc57610acc612fdc565b905060c00201602001358152602001858584818110610aed57610aed612fdc565b905060c00201604001358152602001858584818110610b0e57610b0e612fdc565b905060c002016060016020810190610b269190612ed1565b6001600160801b03168152602001858584818110610b4657610b46612fdc565b905060c002016080016020810190610b5e9190612fa6565b63ffffffff168152602001858584818110610b7b57610b7b612fdc565b905060c0020160a0016020810190610b939190612fa6565b63ffffffff16905260ff6000868685818110610bb157610bb1612fdc565b610bc792602060c0909202019081019150612d29565b6001600160a01b031681526020808201929092526040908101600020835181559183015160018301558201516002909101805460608401516080909401516001600160801b039093166001600160a01b031990911617600160801b63ffffffff948516021763ffffffff60a01b1916600160a01b939092169290920217905580610c50816130c5565b9150506109db565b50505050565b600160fd5460ff166002811115610c7757610c77612c85565b14610c9557604051632b5b3f3760e11b815260040160405180910390fd5b33600090815260ff6020908152604091829020825160a0810184528154815260018201549281018390526002909101546001600160801b0381169382019390935263ffffffff600160801b840481166060830152600160a01b9093049092166080830152610d1d5760405163026a2a0b60e41b81523360048201526024015b60405180910390fd5b6000816080015163ffffffff164211610d3a578160400151610d5c565b60fc546040830151610d5c91600160c01b90046001600160401b0316906130e0565b6001600160801b03169050600064486b6dc000836060015163ffffffff1642610d85919061310b565b838560200151610d959190613122565b610d9f9190613122565b610da99190613157565b8360200151610db8919061316b565b9050610e5660fb60009054906101000a90046001600160a01b03166001600160a01b03166338d52e0f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e0b57600080fd5b505afa158015610e1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e439190613183565b3360fb546001600160a01b031684612211565b6040805160a08101825284518152600060208083018281528385018381526060808601858152608087018681523380885260ff87529689902097518855935160018801559151600290960180549251935163ffffffff908116600160a01b0263ffffffff60a01b19958216600160801b026001600160a01b03199095166001600160801b03998a161794909417949094169290921790915588860151818a015187518981529190961693810193909352931693810193909352917f5ac9c41f99d0a3f1717270c3b4a74646d56c622abc6bdd27f5171535e6d6a0ec91015b60405180910390a2505050565b600080516020613434833981519152610f5981612207565b60fb54604080516361d027b360e01b81529051610fe0926001600160a01b03169182916361d027b391600480820192602092909190829003018186803b158015610fa257600080fd5b505afa158015610fb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fda9190613183565b8461227c565b60fb60009054906101000a90046001600160a01b03166001600160a01b03166361d027b36040518163ffffffff1660e01b815260040160206040518083038186803b15801561102e57600080fd5b505afa158015611042573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110669190613183565b6001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5836040516110a091815260200190565b60405180910390a25050565b6000828152606560205260409020600101546110c781612207565b816001600160a01b0381166110ee5760405162461bcd60e51b8152600401610d14906131a0565b610c5884846122b1565b6001600160a01b03811633146111685760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610d14565b6111728282612337565b5050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156111bf5760405162461bcd60e51b8152600401610d14906131d0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166112086000805160206133ed833981519152546001600160a01b031690565b6001600160a01b03161461122e5760405162461bcd60e51b8152600401610d149061321c565b6112378161239e565b60408051600080825260208201909252611253918391906123a9565b50565b600061126181612207565b61127960008051602061343483398151915283612124565b6040516001600160a01b03831681527f71e79bc051c8df32d78c919fdf1a6af7999c8ee1998debe70825f11a097ed982906020015b60405180910390a15050565b60006112c581612207565b60fb5460408051600160e01b830463ffffffff9081168252600160c01b90930483166020820152858316818301529184166060830152517f36fe4abc4a7c412360cb66ed7e9620d3224178530b66fc597e4b04f1f00749459181900360800190a15060fb80546001600160c01b0316600160e01b63ffffffff9485160263ffffffff60c01b191617600160c01b9290931691909102919091179055565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156113ab5760405162461bcd60e51b8152600401610d14906131d0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166113f46000805160206133ed833981519152546001600160a01b031690565b6001600160a01b03161461141a5760405162461bcd60e51b8152600401610d149061321c565b6114238261239e565b611172828260016123a9565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146114cf5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610d14565b506000805160206133ed83398151915290565b60fe60205281600052604060002081815481106114fe57600080fd5b60009182526020909120600290910201805460019091015490925063ffffffff808216925064010000000082041690600160401b900460ff1684565b600160fd5460ff16600281111561155357611553612c85565b1461157157604051632b5b3f3760e11b815260040160405180910390fd5b33600090815260fe6020526040812080548390811061159257611592612fdc565b60009182526020808320604080516080810182526002909402909101805484526001015463ffffffff8082169385019390935264010000000081049092169083015260ff600160401b909104811615156060830152909250816115f23390565b6001600160a01b031681526020808201929092526040908101600020815160a08101835281548152600182015493810193909352600201546001600160801b0381169183019190915263ffffffff600160801b82048116606080850191909152600160a01b9092041660808301528301519091501561168d5760405163996a0c9360e01b815233600482015260248101849052604401610d14565b816040015163ffffffff164210156116ba57604051632c7e417360e11b8152336004820152602401610d14565b602081015160fc548251612710916116e391600160801b9091046001600160401b031690613122565b6116ed9190613157565b6116f7919061310b565b8251111561171e578151604051633728b83d60e01b81526004810191909152602401610d14565b6001606083015281518151829061173690839061310b565b90525060fb54611751906001600160a01b031633845161227c565b8151604080519182526020820185905233917f7fc4727e062e336010f2c282598ef5f14facb3de68cf8195c2f23e1454b2b74e9101610f34565b6117966000826110ac565b6117a1600033612124565b7ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec633604080516001600160a01b03928316815291841660208301520160405180910390a150565b811580611813575060fb5461180a90600160a01b900463ffffffff1682613268565b63ffffffff1615155b80611830575060fb5463ffffffff600160e01b9091048116908216105b8061184d575060fb5463ffffffff600160c01b9091048116908216115b1561187a57604051631c8fcedb60e31b81526004810183905263ffffffff82166024820152604401610d14565b600160fd5460ff16600281111561189357611893612c85565b146118b157604051632b5b3f3760e11b815260040160405180910390fd5b60fb546118c9906001600160a01b0316333085612211565b60006118d5824261328b565b33600081815260fe602090815260409182902054825188815291820152815193945091927f1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee909281900390910190a233600081815260fe6020908152604080832081516080810183528881524263ffffffff90811682860190815288821683860190815260608401888152855460018082018855968a52888a209551600290910290950194855591519390940180549451915193831667ffffffffffffffff199095169490941764010000000091909216021768ff00000000000000001916600160401b9115159190910217905592825260ff905290812080548592906119dc90849061316b565b9091555050505050565b60006119f181612207565b60fc54604080516001600160801b03928316815291841660208301527f81ef0bd8ac18ebe0e7c219bb2b40954cd2be50e4448e9b8be417b678a922112c910160405180910390a15060fc80546fffffffffffffffffffffffffffffffff19166001600160801b0392909216919091179055565b600160fd5460ff166002811115611a7d57611a7d612c85565b14611a9b57604051632b5b3f3760e11b815260040160405180910390fd5b33600090815260ff6020908152604091829020825160a0810184528154815260018201549281018390526002909101546001600160801b0381169382019390935263ffffffff600160801b840481166060830152600160a01b909304909216608083015215611b2c5760208101516040516308e99bf560e11b81523360048201526024810191909152604401610d14565b60fb5481516040516303d1689d60e11b815260048101919091526000916001600160a01b0316906307a2d13a9060240160206040518083038186803b158015611b7457600080fd5b505afa158015611b88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bac91906132aa565b60fc5490915061271090611bd090600160801b90046001600160401b031683613122565b611bda9190613157565b841115611bfd57604051633728b83d60e01b815260048101859052602401610d14565b6000611c09844261328b565b6040805160a081018252855181526020810188905260fc546001600160801b03169181019190915263ffffffff42811660608301528216608082015290915060ff6000611c533390565b6001600160a01b039081168252602080830193909352604091820160002084518155928401516001840155908301516002909201805460608501516080909501516001600160801b039094166001600160a01b031990911617600160801b63ffffffff958616021763ffffffff60a01b1916600160a01b94909316939093029190911790915560fb5416636370920e336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101889052604401600060405180830381600087803b158015611d2b57600080fd5b505af1158015611d3f573d6000803e3d6000fd5b50505050611d4a3390565b60fc54604080518881526001600160801b03909216602083015263ffffffff841682820152516001600160a01b0392909216917ff67cf6a8fed10bca063dcb5647247e309d39de9f66ae8e00fcd17b209a404f969181900360600190a25050505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6001600160a01b038116600090815260fe60209081526040808320805482518185028101850190935280835260609492939192909184015b82821015611e7a57600084815260209081902060408051608081018252600286029092018054835260019081015463ffffffff8082168587015264010000000082041692840192909252600160401b90910460ff16151560608301529083529092019101611e11565b505050509050919050565b600054610100900460ff1615808015611ea55750600054600160ff909116105b80611ebf5750303b158015611ebf575060005460ff166001145b611f225760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610d14565b6000805460ff191660011790558015611f45576000805461ff0019166101001790555b826001600160a01b038116611f6c5760405162461bcd60e51b8152600401610d14906131a0565b611f74612523565b611f7c612523565b611f876000866122b1565b611f9f600080516020613434833981519152846122b1565b5060fb80546001600160a01b0385166001600160c01b03199091161761278d60a81b176001600160c01b03166509e3400076a760ca1b1790557901f40000000000001b58000000000000000000000000000004b060fc558015610c58576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050565b600061204c81612207565b60fc54604080516001600160401b03600160801b9093048316815291841660208301527f5495dd383d56e4785e5363a1d43fffdf15d23827eb9ac2e09fc695eab09e5938910160405180910390a15060fc80546001600160401b03909216600160801b0267ffffffffffffffff60801b19909216919091179055565b60006120d381612207565b6120eb600080516020613434833981519152836110ac565b6040516001600160a01b03831681527f381ac23337d4d996e5996d989ac24f04e7124f6c5bcdd7d4785d67e3d39e422e906020016112ae565b60008281526065602052604090206001015461213f81612207565b816001600160a01b0381166121665760405162461bcd60e51b8152600401610d14906131a0565b610c588484612337565b600061217b81612207565b60fb546040805163ffffffff600160a01b9093048316815291841660208301527ff4dbb631bf80511593a1df974ad0fc0087082b32bafaba9b99d2a13ae51d5159910160405180910390a15060fb805463ffffffff909216600160a01b0263ffffffff60a01b19909216919091179055565b60006108c460008051602061343483398151915283611dae565b6112538133612590565b6040516001600160a01b0380851660248301528316604482015260648101829052610c589085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526125e9565b6040516001600160a01b0383166024820152604481018290526122ac90849063a9059cbb60e01b90606401612245565b505050565b6122bb8282611dae565b6111725760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556122f33390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6123418282611dae565b156111725760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600061117281612207565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156123dc576122ac836126be565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561241557600080fd5b505afa925050508015612445575060408051601f3d908101601f19168201909252612442918101906132aa565b60015b6124a85760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610d14565b6000805160206133ed83398151915281146125175760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610d14565b506122ac83838361275a565b600054610100900460ff1661258e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610d14565b565b61259a8282611dae565b611172576125a78161277f565b6125b2836020612791565b6040516020016125c39291906132ef565b60408051601f198184030181529082905262461bcd60e51b8252610d1491600401613364565b600061263e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166129339092919063ffffffff16565b905080516000148061265f57508080602001905181019061265f9190613397565b6122ac5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610d14565b6001600160a01b0381163b61272b5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610d14565b6000805160206133ed83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6127638361294a565b6000825111806127705750805b156122ac57610c58838361298a565b60606108c46001600160a01b03831660145b606060006127a0836002613122565b6127ab90600261316b565b6001600160401b038111156127c2576127c2612d92565b6040519080825280601f01601f1916602001820160405280156127ec576020820181803683370190505b509050600360fc1b8160008151811061280757612807612fdc565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061283657612836612fdc565b60200101906001600160f81b031916908160001a905350600061285a846002613122565b61286590600161316b565b90505b60018111156128dd576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061289957612899612fdc565b1a60f81b8282815181106128af576128af612fdc565b60200101906001600160f81b031916908160001a90535060049490941c936128d6816133b9565b9050612868565b50831561292c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610d14565b9392505050565b606061294284846000856129af565b949350505050565b612953816126be565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606061292c838360405180606001604052806027815260200161340d60279139612a8a565b606082471015612a105760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610d14565b600080866001600160a01b03168587604051612a2c91906133d0565b60006040518083038185875af1925050503d8060008114612a69576040519150601f19603f3d011682016040523d82523d6000602084013e612a6e565b606091505b5091509150612a7f87838387612b02565b979650505050505050565b6060600080856001600160a01b031685604051612aa791906133d0565b600060405180830381855af49150503d8060008114612ae2576040519150601f19603f3d011682016040523d82523d6000602084013e612ae7565b606091505b5091509150612af886838387612b02565b9695505050505050565b60608315612b6e578251612b67576001600160a01b0385163b612b675760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610d14565b5081612942565b6129428383815115612b835781518083602001fd5b8060405162461bcd60e51b8152600401610d149190613364565b600060208284031215612baf57600080fd5b81356001600160e01b03198116811461292c57600080fd5b600060208284031215612bd957600080fd5b81356001600160401b038116811461292c57600080fd5b600060208284031215612c0257600080fd5b81356003811061292c57600080fd5b60008060208385031215612c2457600080fd5b82356001600160401b0380821115612c3b57600080fd5b818501915085601f830112612c4f57600080fd5b813581811115612c5e57600080fd5b86602060c083028501011115612c7357600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052602160045260246000fd5b60038110612cb957634e487b7160e01b600052602160045260246000fd5b9052565b602081016108c48284612c9b565b600060208284031215612cdd57600080fd5b5035919050565b6001600160a01b038116811461125357600080fd5b60008060408385031215612d0c57600080fd5b823591506020830135612d1e81612ce4565b809150509250929050565b600060208284031215612d3b57600080fd5b813561292c81612ce4565b803563ffffffff81168114612d5a57600080fd5b919050565b60008060408385031215612d7257600080fd5b612d7b83612d46565b9150612d8960208401612d46565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215612dbb57600080fd5b8235612dc681612ce4565b915060208301356001600160401b0380821115612de257600080fd5b818501915085601f830112612df657600080fd5b813581811115612e0857612e08612d92565b604051601f8201601f19908116603f01168101908382118183101715612e3057612e30612d92565b81604052828152886020848701011115612e4957600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60008060408385031215612e7e57600080fd5b8235612e8981612ce4565b946020939093013593505050565b60008060408385031215612eaa57600080fd5b82359150612d8960208401612d46565b80356001600160801b0381168114612d5a57600080fd5b600060208284031215612ee357600080fd5b61292c82612eba565b602080825282518282018190526000919060409081850190868401855b82811015612f4e578151805185528681015163ffffffff9081168887015286820151168686015260609081015115159085015260809093019290850190600101612f09565b5091979650505050505050565b600080600060608486031215612f7057600080fd5b8335612f7b81612ce4565b92506020840135612f8b81612ce4565b91506040840135612f9b81612ce4565b809150509250925092565b600060208284031215612fb857600080fd5b61292c82612d46565b60408101612fcf8285612c9b565b61292c6020830184612c9b565b634e487b7160e01b600052603260045260246000fd5b600061016082019050835482526001840154602083015260028401546001600160801b03808216604085015263ffffffff808360801c166060860152808360a01c1660808601528535925061304683612ce4565b6001600160a01b03831660a0860152602086013560c0860152604086013560e08601528161307660608801612eba565b166101008601528061308a60808801612d46565b166101208601528061309e60a08801612d46565b166101408601525050509392505050565b634e487b7160e01b600052601160045260246000fd5b60006000198214156130d9576130d96130af565b5060010190565b60006001600160801b03808316818516808303821115613102576131026130af565b01949350505050565b60008282101561311d5761311d6130af565b500390565b600081600019048311821515161561313c5761313c6130af565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261316657613166613141565b500490565b6000821982111561317e5761317e6130af565b500190565b60006020828403121561319557600080fd5b815161292c81612ce4565b602080825260169082015275616464726573732063616e6e6f74206265207a65726f60501b604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b600063ffffffff8084168061327f5761327f613141565b92169190910692915050565b600063ffffffff808316818516808303821115613102576131026130af565b6000602082840312156132bc57600080fd5b5051919050565b60005b838110156132de5781810151838201526020016132c6565b83811115610c585750506000910152565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516133278160178501602088016132c3565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516133588160288401602088016132c3565b01602801949350505050565b60208152600082518060208401526133838160408501602087016132c3565b601f01601f19169190910160400192915050565b6000602082840312156133a957600080fd5b8151801515811461292c57600080fd5b6000816133c8576133c86130af565b506000190190565b600082516133e28184602087016132c3565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564c6b4160e1c0b1db56e39bd78fd50fce96544119dd80fe0169cdb3c9706fd5ea6a2646970667358221220136f936ad98804257331cbc192962ac17fd28a67075302817cb287e4e1d39f5a64736f6c63430008090033",
  "deployedBytecode": "0x60806040526004361061023b5760003560e01c80635d3eea911161012e578063aaad046c116100ab578063d2551f1c1161006f578063d2551f1c146107dd578063d547741f146107fd578063df7054e51461081d578063df89b3441461083d578063dfef66791461085d57600080fd5b8063aaad046c14610716578063c01d099914610738578063c0c53b8b14610765578063ca1dcc7e14610785578063cabca643146107a557600080fd5b80638a5a0caa116100f25780638a5a0caa1461067a5780638d7d4828146106a15780638fece317146106c157806391d14854146106e1578063a217fddf1461070157600080fd5b80635d3eea911461055c57806375829def1461057c57806378a96cc01461059c5780637f371624146105bc5780638a495740146105e057600080fd5b80632e1a7d4d116101bc578063460316201161018057806346031620146104a15780634ca7fcf2146104c15780634f1ef286146104e557806352d1902d146104f8578063584b62a11461050d57600080fd5b80632e1a7d4d146104015780632f2ff15d1461042157806336568abe146104415780633659cfe6146104615780633944d8bf1461048157600080fd5b80631b9265b8116102035780631b9265b81461030f578063200d2ed214610324578063248a9ca31461034b57806326047c5914610389578063288e284b146103c857600080fd5b806301ffc9a714610240578063037cf965146102755780630c5bf3511461029757806313b9cc72146102cf57806318ee3edc146102ef575b600080fd5b34801561024c57600080fd5b5061026061025b366004612b9d565b610893565b60405190151581526020015b60405180910390f35b34801561028157600080fd5b50610295610290366004612bc7565b6108ca565b005b3480156102a357600080fd5b5060fb546102b7906001600160a01b031681565b6040516001600160a01b03909116815260200161026c565b3480156102db57600080fd5b506102956102ea366004612bf0565b61094c565b3480156102fb57600080fd5b5061029561030a366004612c11565b6109c0565b34801561031b57600080fd5b50610295610c5e565b34801561033057600080fd5b5060fd5461033e9060ff1681565b60405161026c9190612cbd565b34801561035757600080fd5b5061037b610366366004612ccb565b60009081526065602052604090206001015490565b60405190815260200161026c565b34801561039557600080fd5b5060fc546103b090600160801b90046001600160401b031681565b6040516001600160401b03909116815260200161026c565b3480156103d457600080fd5b5060fb546103ec90600160c01b900463ffffffff1681565b60405163ffffffff909116815260200161026c565b34801561040d57600080fd5b5061029561041c366004612ccb565b610f41565b34801561042d57600080fd5b5061029561043c366004612cf9565b6110ac565b34801561044d57600080fd5b5061029561045c366004612cf9565b6110f8565b34801561046d57600080fd5b5061029561047c366004612d29565b611176565b34801561048d57600080fd5b5061029561049c366004612d29565b611256565b3480156104ad57600080fd5b506102956104bc366004612d5f565b6112ba565b3480156104cd57600080fd5b5060fb546103ec90600160e01b900463ffffffff1681565b6102956104f3366004612da8565b611362565b34801561050457600080fd5b5061037b61142f565b34801561051957600080fd5b5061052d610528366004612e6b565b6114e2565b60405161026c949392919093845263ffffffff9283166020850152911660408301521515606082015260800190565b34801561056857600080fd5b50610295610577366004612ccb565b61153a565b34801561058857600080fd5b50610295610597366004612d29565b61178b565b3480156105a857600080fd5b506102956105b7366004612e97565b6117e8565b3480156105c857600080fd5b5060fb546103ec90600160a01b900463ffffffff1681565b3480156105ec57600080fd5b5061063e6105fb366004612d29565b60ff602052600090815260409020805460018201546002909201549091906001600160801b0381169063ffffffff600160801b8204811691600160a01b90041685565b6040805195865260208601949094526001600160801b039092169284019290925263ffffffff918216606084015216608082015260a00161026c565b34801561068657600080fd5b5060fc546103b090600160c01b90046001600160401b031681565b3480156106ad57600080fd5b506102956106bc366004612ed1565b6119e6565b3480156106cd57600080fd5b506102956106dc366004612e97565b611a64565b3480156106ed57600080fd5b506102606106fc366004612cf9565b611dae565b34801561070d57600080fd5b5061037b600081565b34801561072257600080fd5b5061037b60008051602061343483398151915281565b34801561074457600080fd5b50610758610753366004612d29565b611dd9565b60405161026c9190612eec565b34801561077157600080fd5b50610295610780366004612f5b565b611e85565b34801561079157600080fd5b506102956107a0366004612bc7565b612041565b3480156107b157600080fd5b5060fc546107c5906001600160801b031681565b6040516001600160801b03909116815260200161026c565b3480156107e957600080fd5b506102956107f8366004612d29565b6120c8565b34801561080957600080fd5b50610295610818366004612cf9565b612124565b34801561082957600080fd5b50610295610838366004612fa6565b612170565b34801561084957600080fd5b50610260610858366004612d29565b6121ed565b34801561086957600080fd5b5061037b610878366004612d29565b6001600160a01b0316600090815260fe602052604090205490565b60006001600160e01b03198216637965db0b60e01b14806108c457506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006108d581612207565b60fc54604080516001600160401b03600160c01b9093048316815291841660208301527f9b9459a402561ae03e196d64f242998d8df6e6886e44cdd3663bd3a1c5f727c6910160405180910390a15060fc80546001600160401b03909216600160c01b026001600160c01b03909216919091179055565b600061095781612207565b60fd546040517fbdbabe6c44fbdbeac28bc3ae9eb1acc2d06c4a5f916867e42aeb583558f9a115916109909160ff909116908590612fc1565b60405180910390a160fd805483919060ff191660018360028111156109b7576109b7612c85565b02179055505050565b6000805160206134348339815191526109d881612207565b60005b82811015610c58578383828181106109f5576109f5612fdc565b610a0b92602060c0909202019081019150612d29565b6001600160a01b03167f598f4701add317b9349956ff4eb309235a6f01efb81a0689e938b45ccfa9386360ff6000878786818110610a4b57610a4b612fdc565b610a6192602060c0909202019081019150612d29565b6001600160a01b03166001600160a01b03168152602001908152602001600020868685818110610a9357610a93612fdc565b905060c00201604051610aa7929190612ff2565b60405180910390a26040518060a00160405280858584818110610acc57610acc612fdc565b905060c00201602001358152602001858584818110610aed57610aed612fdc565b905060c00201604001358152602001858584818110610b0e57610b0e612fdc565b905060c002016060016020810190610b269190612ed1565b6001600160801b03168152602001858584818110610b4657610b46612fdc565b905060c002016080016020810190610b5e9190612fa6565b63ffffffff168152602001858584818110610b7b57610b7b612fdc565b905060c0020160a0016020810190610b939190612fa6565b63ffffffff16905260ff6000868685818110610bb157610bb1612fdc565b610bc792602060c0909202019081019150612d29565b6001600160a01b031681526020808201929092526040908101600020835181559183015160018301558201516002909101805460608401516080909401516001600160801b039093166001600160a01b031990911617600160801b63ffffffff948516021763ffffffff60a01b1916600160a01b939092169290920217905580610c50816130c5565b9150506109db565b50505050565b600160fd5460ff166002811115610c7757610c77612c85565b14610c9557604051632b5b3f3760e11b815260040160405180910390fd5b33600090815260ff6020908152604091829020825160a0810184528154815260018201549281018390526002909101546001600160801b0381169382019390935263ffffffff600160801b840481166060830152600160a01b9093049092166080830152610d1d5760405163026a2a0b60e41b81523360048201526024015b60405180910390fd5b6000816080015163ffffffff164211610d3a578160400151610d5c565b60fc546040830151610d5c91600160c01b90046001600160401b0316906130e0565b6001600160801b03169050600064486b6dc000836060015163ffffffff1642610d85919061310b565b838560200151610d959190613122565b610d9f9190613122565b610da99190613157565b8360200151610db8919061316b565b9050610e5660fb60009054906101000a90046001600160a01b03166001600160a01b03166338d52e0f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e0b57600080fd5b505afa158015610e1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e439190613183565b3360fb546001600160a01b031684612211565b6040805160a08101825284518152600060208083018281528385018381526060808601858152608087018681523380885260ff87529689902097518855935160018801559151600290960180549251935163ffffffff908116600160a01b0263ffffffff60a01b19958216600160801b026001600160a01b03199095166001600160801b03998a161794909417949094169290921790915588860151818a015187518981529190961693810193909352931693810193909352917f5ac9c41f99d0a3f1717270c3b4a74646d56c622abc6bdd27f5171535e6d6a0ec91015b60405180910390a2505050565b600080516020613434833981519152610f5981612207565b60fb54604080516361d027b360e01b81529051610fe0926001600160a01b03169182916361d027b391600480820192602092909190829003018186803b158015610fa257600080fd5b505afa158015610fb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fda9190613183565b8461227c565b60fb60009054906101000a90046001600160a01b03166001600160a01b03166361d027b36040518163ffffffff1660e01b815260040160206040518083038186803b15801561102e57600080fd5b505afa158015611042573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110669190613183565b6001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5836040516110a091815260200190565b60405180910390a25050565b6000828152606560205260409020600101546110c781612207565b816001600160a01b0381166110ee5760405162461bcd60e51b8152600401610d14906131a0565b610c5884846122b1565b6001600160a01b03811633146111685760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610d14565b6111728282612337565b5050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156111bf5760405162461bcd60e51b8152600401610d14906131d0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166112086000805160206133ed833981519152546001600160a01b031690565b6001600160a01b03161461122e5760405162461bcd60e51b8152600401610d149061321c565b6112378161239e565b60408051600080825260208201909252611253918391906123a9565b50565b600061126181612207565b61127960008051602061343483398151915283612124565b6040516001600160a01b03831681527f71e79bc051c8df32d78c919fdf1a6af7999c8ee1998debe70825f11a097ed982906020015b60405180910390a15050565b60006112c581612207565b60fb5460408051600160e01b830463ffffffff9081168252600160c01b90930483166020820152858316818301529184166060830152517f36fe4abc4a7c412360cb66ed7e9620d3224178530b66fc597e4b04f1f00749459181900360800190a15060fb80546001600160c01b0316600160e01b63ffffffff9485160263ffffffff60c01b191617600160c01b9290931691909102919091179055565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156113ab5760405162461bcd60e51b8152600401610d14906131d0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166113f46000805160206133ed833981519152546001600160a01b031690565b6001600160a01b03161461141a5760405162461bcd60e51b8152600401610d149061321c565b6114238261239e565b611172828260016123a9565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146114cf5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610d14565b506000805160206133ed83398151915290565b60fe60205281600052604060002081815481106114fe57600080fd5b60009182526020909120600290910201805460019091015490925063ffffffff808216925064010000000082041690600160401b900460ff1684565b600160fd5460ff16600281111561155357611553612c85565b1461157157604051632b5b3f3760e11b815260040160405180910390fd5b33600090815260fe6020526040812080548390811061159257611592612fdc565b60009182526020808320604080516080810182526002909402909101805484526001015463ffffffff8082169385019390935264010000000081049092169083015260ff600160401b909104811615156060830152909250816115f23390565b6001600160a01b031681526020808201929092526040908101600020815160a08101835281548152600182015493810193909352600201546001600160801b0381169183019190915263ffffffff600160801b82048116606080850191909152600160a01b9092041660808301528301519091501561168d5760405163996a0c9360e01b815233600482015260248101849052604401610d14565b816040015163ffffffff164210156116ba57604051632c7e417360e11b8152336004820152602401610d14565b602081015160fc548251612710916116e391600160801b9091046001600160401b031690613122565b6116ed9190613157565b6116f7919061310b565b8251111561171e578151604051633728b83d60e01b81526004810191909152602401610d14565b6001606083015281518151829061173690839061310b565b90525060fb54611751906001600160a01b031633845161227c565b8151604080519182526020820185905233917f7fc4727e062e336010f2c282598ef5f14facb3de68cf8195c2f23e1454b2b74e9101610f34565b6117966000826110ac565b6117a1600033612124565b7ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec633604080516001600160a01b03928316815291841660208301520160405180910390a150565b811580611813575060fb5461180a90600160a01b900463ffffffff1682613268565b63ffffffff1615155b80611830575060fb5463ffffffff600160e01b9091048116908216105b8061184d575060fb5463ffffffff600160c01b9091048116908216115b1561187a57604051631c8fcedb60e31b81526004810183905263ffffffff82166024820152604401610d14565b600160fd5460ff16600281111561189357611893612c85565b146118b157604051632b5b3f3760e11b815260040160405180910390fd5b60fb546118c9906001600160a01b0316333085612211565b60006118d5824261328b565b33600081815260fe602090815260409182902054825188815291820152815193945091927f1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee909281900390910190a233600081815260fe6020908152604080832081516080810183528881524263ffffffff90811682860190815288821683860190815260608401888152855460018082018855968a52888a209551600290910290950194855591519390940180549451915193831667ffffffffffffffff199095169490941764010000000091909216021768ff00000000000000001916600160401b9115159190910217905592825260ff905290812080548592906119dc90849061316b565b9091555050505050565b60006119f181612207565b60fc54604080516001600160801b03928316815291841660208301527f81ef0bd8ac18ebe0e7c219bb2b40954cd2be50e4448e9b8be417b678a922112c910160405180910390a15060fc80546fffffffffffffffffffffffffffffffff19166001600160801b0392909216919091179055565b600160fd5460ff166002811115611a7d57611a7d612c85565b14611a9b57604051632b5b3f3760e11b815260040160405180910390fd5b33600090815260ff6020908152604091829020825160a0810184528154815260018201549281018390526002909101546001600160801b0381169382019390935263ffffffff600160801b840481166060830152600160a01b909304909216608083015215611b2c5760208101516040516308e99bf560e11b81523360048201526024810191909152604401610d14565b60fb5481516040516303d1689d60e11b815260048101919091526000916001600160a01b0316906307a2d13a9060240160206040518083038186803b158015611b7457600080fd5b505afa158015611b88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bac91906132aa565b60fc5490915061271090611bd090600160801b90046001600160401b031683613122565b611bda9190613157565b841115611bfd57604051633728b83d60e01b815260048101859052602401610d14565b6000611c09844261328b565b6040805160a081018252855181526020810188905260fc546001600160801b03169181019190915263ffffffff42811660608301528216608082015290915060ff6000611c533390565b6001600160a01b039081168252602080830193909352604091820160002084518155928401516001840155908301516002909201805460608501516080909501516001600160801b039094166001600160a01b031990911617600160801b63ffffffff958616021763ffffffff60a01b1916600160a01b94909316939093029190911790915560fb5416636370920e336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101889052604401600060405180830381600087803b158015611d2b57600080fd5b505af1158015611d3f573d6000803e3d6000fd5b50505050611d4a3390565b60fc54604080518881526001600160801b03909216602083015263ffffffff841682820152516001600160a01b0392909216917ff67cf6a8fed10bca063dcb5647247e309d39de9f66ae8e00fcd17b209a404f969181900360600190a25050505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6001600160a01b038116600090815260fe60209081526040808320805482518185028101850190935280835260609492939192909184015b82821015611e7a57600084815260209081902060408051608081018252600286029092018054835260019081015463ffffffff8082168587015264010000000082041692840192909252600160401b90910460ff16151560608301529083529092019101611e11565b505050509050919050565b600054610100900460ff1615808015611ea55750600054600160ff909116105b80611ebf5750303b158015611ebf575060005460ff166001145b611f225760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610d14565b6000805460ff191660011790558015611f45576000805461ff0019166101001790555b826001600160a01b038116611f6c5760405162461bcd60e51b8152600401610d14906131a0565b611f74612523565b611f7c612523565b611f876000866122b1565b611f9f600080516020613434833981519152846122b1565b5060fb80546001600160a01b0385166001600160c01b03199091161761278d60a81b176001600160c01b03166509e3400076a760ca1b1790557901f40000000000001b58000000000000000000000000000004b060fc558015610c58576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050565b600061204c81612207565b60fc54604080516001600160401b03600160801b9093048316815291841660208301527f5495dd383d56e4785e5363a1d43fffdf15d23827eb9ac2e09fc695eab09e5938910160405180910390a15060fc80546001600160401b03909216600160801b0267ffffffffffffffff60801b19909216919091179055565b60006120d381612207565b6120eb600080516020613434833981519152836110ac565b6040516001600160a01b03831681527f381ac23337d4d996e5996d989ac24f04e7124f6c5bcdd7d4785d67e3d39e422e906020016112ae565b60008281526065602052604090206001015461213f81612207565b816001600160a01b0381166121665760405162461bcd60e51b8152600401610d14906131a0565b610c588484612337565b600061217b81612207565b60fb546040805163ffffffff600160a01b9093048316815291841660208301527ff4dbb631bf80511593a1df974ad0fc0087082b32bafaba9b99d2a13ae51d5159910160405180910390a15060fb805463ffffffff909216600160a01b0263ffffffff60a01b19909216919091179055565b60006108c460008051602061343483398151915283611dae565b6112538133612590565b6040516001600160a01b0380851660248301528316604482015260648101829052610c589085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526125e9565b6040516001600160a01b0383166024820152604481018290526122ac90849063a9059cbb60e01b90606401612245565b505050565b6122bb8282611dae565b6111725760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556122f33390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6123418282611dae565b156111725760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600061117281612207565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156123dc576122ac836126be565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561241557600080fd5b505afa925050508015612445575060408051601f3d908101601f19168201909252612442918101906132aa565b60015b6124a85760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610d14565b6000805160206133ed83398151915281146125175760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610d14565b506122ac83838361275a565b600054610100900460ff1661258e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610d14565b565b61259a8282611dae565b611172576125a78161277f565b6125b2836020612791565b6040516020016125c39291906132ef565b60408051601f198184030181529082905262461bcd60e51b8252610d1491600401613364565b600061263e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166129339092919063ffffffff16565b905080516000148061265f57508080602001905181019061265f9190613397565b6122ac5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610d14565b6001600160a01b0381163b61272b5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610d14565b6000805160206133ed83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6127638361294a565b6000825111806127705750805b156122ac57610c58838361298a565b60606108c46001600160a01b03831660145b606060006127a0836002613122565b6127ab90600261316b565b6001600160401b038111156127c2576127c2612d92565b6040519080825280601f01601f1916602001820160405280156127ec576020820181803683370190505b509050600360fc1b8160008151811061280757612807612fdc565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061283657612836612fdc565b60200101906001600160f81b031916908160001a905350600061285a846002613122565b61286590600161316b565b90505b60018111156128dd576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061289957612899612fdc565b1a60f81b8282815181106128af576128af612fdc565b60200101906001600160f81b031916908160001a90535060049490941c936128d6816133b9565b9050612868565b50831561292c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610d14565b9392505050565b606061294284846000856129af565b949350505050565b612953816126be565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606061292c838360405180606001604052806027815260200161340d60279139612a8a565b606082471015612a105760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610d14565b600080866001600160a01b03168587604051612a2c91906133d0565b60006040518083038185875af1925050503d8060008114612a69576040519150601f19603f3d011682016040523d82523d6000602084013e612a6e565b606091505b5091509150612a7f87838387612b02565b979650505050505050565b6060600080856001600160a01b031685604051612aa791906133d0565b600060405180830381855af49150503d8060008114612ae2576040519150601f19603f3d011682016040523d82523d6000602084013e612ae7565b606091505b5091509150612af886838387612b02565b9695505050505050565b60608315612b6e578251612b67576001600160a01b0385163b612b675760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610d14565b5081612942565b6129428383815115612b835781518083602001fd5b8060405162461bcd60e51b8152600401610d149190613364565b600060208284031215612baf57600080fd5b81356001600160e01b03198116811461292c57600080fd5b600060208284031215612bd957600080fd5b81356001600160401b038116811461292c57600080fd5b600060208284031215612c0257600080fd5b81356003811061292c57600080fd5b60008060208385031215612c2457600080fd5b82356001600160401b0380821115612c3b57600080fd5b818501915085601f830112612c4f57600080fd5b813581811115612c5e57600080fd5b86602060c083028501011115612c7357600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052602160045260246000fd5b60038110612cb957634e487b7160e01b600052602160045260246000fd5b9052565b602081016108c48284612c9b565b600060208284031215612cdd57600080fd5b5035919050565b6001600160a01b038116811461125357600080fd5b60008060408385031215612d0c57600080fd5b823591506020830135612d1e81612ce4565b809150509250929050565b600060208284031215612d3b57600080fd5b813561292c81612ce4565b803563ffffffff81168114612d5a57600080fd5b919050565b60008060408385031215612d7257600080fd5b612d7b83612d46565b9150612d8960208401612d46565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215612dbb57600080fd5b8235612dc681612ce4565b915060208301356001600160401b0380821115612de257600080fd5b818501915085601f830112612df657600080fd5b813581811115612e0857612e08612d92565b604051601f8201601f19908116603f01168101908382118183101715612e3057612e30612d92565b81604052828152886020848701011115612e4957600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60008060408385031215612e7e57600080fd5b8235612e8981612ce4565b946020939093013593505050565b60008060408385031215612eaa57600080fd5b82359150612d8960208401612d46565b80356001600160801b0381168114612d5a57600080fd5b600060208284031215612ee357600080fd5b61292c82612eba565b602080825282518282018190526000919060409081850190868401855b82811015612f4e578151805185528681015163ffffffff9081168887015286820151168686015260609081015115159085015260809093019290850190600101612f09565b5091979650505050505050565b600080600060608486031215612f7057600080fd5b8335612f7b81612ce4565b92506020840135612f8b81612ce4565b91506040840135612f9b81612ce4565b809150509250925092565b600060208284031215612fb857600080fd5b61292c82612d46565b60408101612fcf8285612c9b565b61292c6020830184612c9b565b634e487b7160e01b600052603260045260246000fd5b600061016082019050835482526001840154602083015260028401546001600160801b03808216604085015263ffffffff808360801c166060860152808360a01c1660808601528535925061304683612ce4565b6001600160a01b03831660a0860152602086013560c0860152604086013560e08601528161307660608801612eba565b166101008601528061308a60808801612d46565b166101208601528061309e60a08801612d46565b166101408601525050509392505050565b634e487b7160e01b600052601160045260246000fd5b60006000198214156130d9576130d96130af565b5060010190565b60006001600160801b03808316818516808303821115613102576131026130af565b01949350505050565b60008282101561311d5761311d6130af565b500390565b600081600019048311821515161561313c5761313c6130af565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261316657613166613141565b500490565b6000821982111561317e5761317e6130af565b500190565b60006020828403121561319557600080fd5b815161292c81612ce4565b602080825260169082015275616464726573732063616e6e6f74206265207a65726f60501b604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b600063ffffffff8084168061327f5761327f613141565b92169190910692915050565b600063ffffffff808316818516808303821115613102576131026130af565b6000602082840312156132bc57600080fd5b5051919050565b60005b838110156132de5781810151838201526020016132c6565b83811115610c585750506000910152565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516133278160178501602088016132c3565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516133588160288401602088016132c3565b01602801949350505050565b60208152600082518060208401526133838160408501602087016132c3565b601f01601f19169190910160400192915050565b6000602082840312156133a957600080fd5b8151801515811461292c57600080fd5b6000816133c8576133c86130af565b506000190190565b600082516133e28184602087016132c3565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564c6b4160e1c0b1db56e39bd78fd50fce96544119dd80fe0169cdb3c9706fd5ea6a2646970667358221220136f936ad98804257331cbc192962ac17fd28a67075302817cb287e4e1d39f5a64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allStakes(address)": {
        "params": {
          "_staker": "address of staker "
        }
      },
      "borrow(uint256,uint32)": {
        "params": {
          "_amount": "amount of tokens to be borrowed",
          "_borrowPeriod": "borrowing period in seconds "
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,address,address)": {
        "params": {
          "_admin": "address of admin that is resposible for managing liquidity lockup operations",
          "_liquidityManager": "address of liquidity manager that is responsible for liquidations of loans",
          "_rwaToken": "address of RWA Vault"
        }
      },
      "isLiquidityManager(address)": {
        "params": {
          "_account": "address to query for role"
        }
      },
      "liquidate((address,uint256,uint256,uint128,uint32,uint32)[])": {
        "params": {
          "_liquidate": "liquidation information"
        }
      },
      "numberOfStakes(address)": {
        "params": {
          "_staker": "address of lender"
        }
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "stake(uint256,uint32)": {
        "params": {
          "_amount": "amount of shares to stake",
          "_lockingPeriodInSeconds": "locking period converted in seconds"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "unStake(uint256)": {
        "params": {
          "_index": "position number"
        }
      },
      "updateBorrowAPY(uint128)": {
        "params": {
          "_borrowAPY": "percentage in 2 basis point (ex: for 10.03% => 1003)"
        }
      },
      "updateLeverageAllowed(uint64)": {
        "params": {
          "_leverageAllowed": "the new leverage value to be set"
        }
      },
      "updateMinMaxDurationAllowed(uint32,uint32)": {
        "params": {
          "_max": "maximum lockup period in seconds",
          "_min": "minimum lockup period in seconds"
        }
      },
      "updatePenaltyAPY(uint64)": {
        "params": {
          "_penaltyAPY": "percentage in 2 basis point (ex: for 10.03% => 1003)"
        }
      },
      "updatePoolStatus(uint8)": {
        "params": {
          "_status": "status to update"
        }
      },
      "updateSlicePeriod(uint32)": {
        "params": {
          "_slice": "slice period in seconds"
        }
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "title": "RWA Leverage",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLiquidityManager(address)": {
        "notice": "adds new liquidity manager"
      },
      "allStakes(address)": {
        "notice": "returns stakes of given user"
      },
      "borrow(uint256,uint32)": {
        "notice": "allow to borrow pool tokens from RWA vault reserve balance"
      },
      "grantRole(bytes32,address)": {
        "notice": "grants a role to account"
      },
      "initialize(address,address,address)": {
        "notice": "Initializes contract"
      },
      "isLiquidityManager(address)": {
        "notice": "returns true if given address has liquidity manager role"
      },
      "liquidate((address,uint256,uint256,uint128,uint32,uint32)[])": {
        "notice": "liquidates user loans in batch"
      },
      "numberOfStakes(address)": {
        "notice": "returns number of lockups commited by lender"
      },
      "pay()": {
        "notice": "pays existing loan, penalty will be charged in case of late payment"
      },
      "removeLiquidityManager(address)": {
        "notice": "removes existing liquidity manager"
      },
      "stake(uint256,uint32)": {
        "notice": "stakes RWA vault shares for given period"
      },
      "transferAdmin(address)": {
        "notice": "transfer admin role to new account"
      },
      "unStake(uint256)": {
        "notice": "unstakes given position"
      },
      "updateBorrowAPY(uint128)": {
        "notice": "updates borrow APY that will be charged to new loans"
      },
      "updateLeverageAllowed(uint64)": {
        "notice": "updates the allowed leverage for the system"
      },
      "updateMinMaxDurationAllowed(uint32,uint32)": {
        "notice": "updates minimum and maximum period allowed for staking"
      },
      "updatePenaltyAPY(uint64)": {
        "notice": "Updates the penalty APY for overdue loans"
      },
      "updatePoolStatus(uint8)": {
        "notice": "updates pool status"
      },
      "updateSlicePeriod(uint32)": {
        "notice": "updates slice period for staking"
      },
      "withdraw(uint256)": {
        "notice": "withdraws RWA Vault shares from this contract to RWA Vault"
      }
    },
    "notice": "Extension of RWA Vault to manage liquidity lockups and leverage holdings",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 948,
        "contract": "contracts/protocol/RWALeverage.sol:RWALeverage",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 951,
        "contract": "contracts/protocol/RWALeverage.sol:RWALeverage",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3521,
        "contract": "contracts/protocol/RWALeverage.sol:RWALeverage",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3904,
        "contract": "contracts/protocol/RWALeverage.sol:RWALeverage",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/protocol/RWALeverage.sol:RWALeverage",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 334,
        "contract": "contracts/protocol/RWALeverage.sol:RWALeverage",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 930,
        "contract": "contracts/protocol/RWALeverage.sol:RWALeverage",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1245,
        "contract": "contracts/protocol/RWALeverage.sol:RWALeverage",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4940,
        "contract": "contracts/protocol/RWALeverage.sol:RWALeverage",
        "label": "rwaToken",
        "offset": 0,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 4942,
        "contract": "contracts/protocol/RWALeverage.sol:RWALeverage",
        "label": "slice",
        "offset": 20,
        "slot": "251",
        "type": "t_uint32"
      },
      {
        "astId": 4944,
        "contract": "contracts/protocol/RWALeverage.sol:RWALeverage",
        "label": "maxStakeDurationAllowed",
        "offset": 24,
        "slot": "251",
        "type": "t_uint32"
      },
      {
        "astId": 4946,
        "contract": "contracts/protocol/RWALeverage.sol:RWALeverage",
        "label": "minStakeDurationAllowed",
        "offset": 28,
        "slot": "251",
        "type": "t_uint32"
      },
      {
        "astId": 4948,
        "contract": "contracts/protocol/RWALeverage.sol:RWALeverage",
        "label": "borrowAPY",
        "offset": 0,
        "slot": "252",
        "type": "t_uint128"
      },
      {
        "astId": 4950,
        "contract": "contracts/protocol/RWALeverage.sol:RWALeverage",
        "label": "leverageAllowed",
        "offset": 16,
        "slot": "252",
        "type": "t_uint64"
      },
      {
        "astId": 4952,
        "contract": "contracts/protocol/RWALeverage.sol:RWALeverage",
        "label": "penaltyAPY",
        "offset": 24,
        "slot": "252",
        "type": "t_uint64"
      },
      {
        "astId": 4955,
        "contract": "contracts/protocol/RWALeverage.sol:RWALeverage",
        "label": "status",
        "offset": 0,
        "slot": "253",
        "type": "t_enum(PoolStatus)5003"
      },
      {
        "astId": 4961,
        "contract": "contracts/protocol/RWALeverage.sol:RWALeverage",
        "label": "stakes",
        "offset": 0,
        "slot": "254",
        "type": "t_mapping(t_address,t_array(t_struct(StakeInfo)4975_storage)dyn_storage)"
      },
      {
        "astId": 4966,
        "contract": "contracts/protocol/RWALeverage.sol:RWALeverage",
        "label": "leverages",
        "offset": 0,
        "slot": "255",
        "type": "t_mapping(t_address,t_struct(LeverageInfo)4986_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(StakeInfo)4975_storage)dyn_storage": {
        "base": "t_struct(StakeInfo)4975_storage",
        "encoding": "dynamic_array",
        "label": "struct RWALeverage.StakeInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(PoolStatus)5003": {
        "encoding": "inplace",
        "label": "enum RWALeverage.PoolStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_struct(StakeInfo)4975_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RWALeverage.StakeInfo[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(StakeInfo)4975_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(LeverageInfo)4986_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RWALeverage.LeverageInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(LeverageInfo)4986_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_struct(LeverageInfo)4986_storage": {
        "encoding": "inplace",
        "label": "struct RWALeverage.LeverageInfo",
        "members": [
          {
            "astId": 4977,
            "contract": "contracts/protocol/RWALeverage.sol:RWALeverage",
            "label": "totalStaked",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4979,
            "contract": "contracts/protocol/RWALeverage.sol:RWALeverage",
            "label": "totalBorrowed",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4981,
            "contract": "contracts/protocol/RWALeverage.sol:RWALeverage",
            "label": "borrowAPY",
            "offset": 0,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 4983,
            "contract": "contracts/protocol/RWALeverage.sol:RWALeverage",
            "label": "borrowTime",
            "offset": 16,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 4985,
            "contract": "contracts/protocol/RWALeverage.sol:RWALeverage",
            "label": "paymentDue",
            "offset": 20,
            "slot": "2",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/protocol/RWALeverage.sol:RWALeverage",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/protocol/RWALeverage.sol:RWALeverage",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(StakeInfo)4975_storage": {
        "encoding": "inplace",
        "label": "struct RWALeverage.StakeInfo",
        "members": [
          {
            "astId": 4968,
            "contract": "contracts/protocol/RWALeverage.sol:RWALeverage",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4970,
            "contract": "contracts/protocol/RWALeverage.sol:RWALeverage",
            "label": "lockTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 4972,
            "contract": "contracts/protocol/RWALeverage.sol:RWALeverage",
            "label": "unlockTime",
            "offset": 4,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 4974,
            "contract": "contracts/protocol/RWALeverage.sol:RWALeverage",
            "label": "isUnstaked",
            "offset": 8,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}